<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\tcpip.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\tcpip.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Fri Feb 10 17:32:34 2023
<BR><P>
<H3>Maximum Stack Usage =       2096 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
client_thread &rArr; request_parese &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[182]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC_IRQHandler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
 <LI><a href="#[105]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[66]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">ETH_IRQHandler</a> from netif_disc.o(i.ETH_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[69]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[68]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from os_plat_s.o(SWITCH) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from rtc.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">RTC_WKUP_IRQHandler</a> from rtc.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">SDIO_IRQHandler</a> from sdio_sdcard.o(i.SDIO_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from os_plat.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6a]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[1a]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[76]">___backspace$unlocked</a> from backspace.o(.text) referenced from scanf_char_file_locked.o(.text)
 <LI><a href="#[c3]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[75]">_fgetc$unlocked</a> from fgetc.o(i.fgetc) referenced from scanf_char_file_locked.o(.text)
 <LI><a href="#[74]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[70]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[71]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6f]">_sbackspace</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[72]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6e]">_sgetc</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[6d]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[6c]">_sputc</a> from _sputc.o(.text) referenced 2 times from vsprintf.o(.text)
 <LI><a href="#[77]">arp_cache_tmo</a> from arp.o(i.arp_cache_tmo) referenced from arp.o(i.arp_init)
 <LI><a href="#[7b]">client_thread</a> from httpd.o(i.client_thread) referenced from httpd.o(i.httpd_server_thread)
 <LI><a href="#[8b]">dns_req_in</a> from dns.o(i.dns_req_in) referenced from socket.o(i.x_gethostbyname_r)
 <LI><a href="#[78]">dns_update_tmo</a> from dns.o(i.dns_update_tmo) referenced from dns.o(i.dns_init)
 <LI><a href="#[94]">ether_close</a> from ether.o(i.ether_close) referenced from ether.o(.constdata)
 <LI><a href="#[95]">ether_in</a> from ether.o(i.ether_in) referenced from ether.o(.constdata)
 <LI><a href="#[93]">ether_open</a> from ether.o(i.ether_open) referenced from ether.o(.constdata)
 <LI><a href="#[96]">ether_out</a> from ether.o(i.ether_out) referenced from ether.o(.constdata)
 <LI><a href="#[7d]">first_task_entry</a> from app.o(i.first_task_entry) referenced from app.o(i.main)
 <LI><a href="#[7a]">frag_tmo</a> from ipv4.o(i.frag_tmo) referenced from ipv4.o(i.frag_init)
 <LI><a href="#[7c]">httpd_server_thread</a> from httpd.o(i.httpd_server_thread) referenced from httpd.o(i.httpd_start)
 <LI><a href="#[7e]">idle_task_entry</a> from os_core.o(i.idle_task_entry) referenced from os_core.o(i.os_init)
 <LI><a href="#[73]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[98]">loop_close</a> from loop.o(i.loop_close) referenced from loop.o(.constdata)
 <LI><a href="#[97]">loop_open</a> from loop.o(i.loop_open) referenced from loop.o(.constdata)
 <LI><a href="#[99]">loop_xmit</a> from loop.o(i.loop_xmit) referenced from loop.o(.constdata)
 <LI><a href="#[b6]">netif_disc_close</a> from netif_disc.o(i.netif_disc_close) referenced from netif_disc.o(.constdata)
 <LI><a href="#[b5]">netif_disc_open</a> from netif_disc.o(i.netif_disc_open) referenced from netif_disc.o(.constdata)
 <LI><a href="#[b7]">netif_disc_xmit</a> from netif_disc.o(i.netif_disc_xmit) referenced from netif_disc.o(.constdata)
 <LI><a href="#[7f]">os_task_exit</a> from os_task.o(i.os_task_exit) referenced from os_plat.o(i.os_task_ctx_init)
 <LI><a href="#[9e]">raw_bind</a> from raw.o(i.raw_bind) referenced from raw.o(.constdata)
 <LI><a href="#[9a]">raw_close</a> from raw.o(i.raw_close) referenced from raw.o(.constdata)
 <LI><a href="#[9f]">raw_connect</a> from raw.o(i.raw_connect) referenced from raw.o(.constdata)
 <LI><a href="#[a2]">raw_create</a> from raw.o(i.raw_create) referenced from sock.o(.constdata)
 <LI><a href="#[9c]">raw_recvfrom</a> from raw.o(i.raw_recvfrom) referenced from raw.o(.constdata)
 <LI><a href="#[9b]">raw_sendto</a> from raw.o(i.raw_sendto) referenced from raw.o(.constdata)
 <LI><a href="#[86]">sock_accept_req_in</a> from sock.o(i.sock_accept_req_in) referenced from socket.o(i.x_accept)
 <LI><a href="#[87]">sock_bind_req_in</a> from sock.o(i.sock_bind_req_in) referenced from socket.o(i.x_bind)
 <LI><a href="#[88]">sock_close_req_in</a> from sock.o(i.sock_close_req_in) referenced from socket.o(i.x_close)
 <LI><a href="#[8a]">sock_connect_req_in</a> from sock.o(i.sock_connect_req_in) referenced from socket.o(i.x_connect)
 <LI><a href="#[92]">sock_create_req_in</a> from sock.o(i.sock_create_req_in) referenced from socket.o(i.x_socket)
 <LI><a href="#[89]">sock_destroy_req_in</a> from sock.o(i.sock_destroy_req_in) referenced from socket.o(i.x_close)
 <LI><a href="#[8c]">sock_listen_req_in</a> from sock.o(i.sock_listen_req_in) referenced from socket.o(i.x_listen)
 <LI><a href="#[a1]">sock_recv</a> from sock.o(i.sock_recv) referenced 2 times from raw.o(.constdata)
 <LI><a href="#[8d]">sock_recv_req_in</a> from sock.o(i.sock_recv_req_in) referenced from socket.o(i.x_recv)
 <LI><a href="#[8e]">sock_recvfrom_req_in</a> from sock.o(i.sock_recvfrom_req_in) referenced from socket.o(i.x_recvfrom)
 <LI><a href="#[a0]">sock_send</a> from sock.o(i.sock_send) referenced 2 times from raw.o(.constdata)
 <LI><a href="#[8f]">sock_send_req_in</a> from sock.o(i.sock_send_req_in) referenced from socket.o(i.x_send)
 <LI><a href="#[90]">sock_sendto_req_in</a> from sock.o(i.sock_sendto_req_in) referenced from socket.o(i.x_sendto)
 <LI><a href="#[9d]">sock_setopt</a> from sock.o(i.sock_setopt) referenced 2 times from raw.o(.constdata)
 <LI><a href="#[91]">sock_setsockopt_req_in</a> from sock.o(i.sock_setsockopt_req_in) referenced from socket.o(i.x_setsockopt)
 <LI><a href="#[c1]">tcp_accept</a> from tcp.o(i.tcp_accept) referenced from tcp.o(.constdata)
 <LI><a href="#[bc]">tcp_bind</a> from tcp.o(i.tcp_bind) referenced from tcp.o(.constdata)
 <LI><a href="#[ba]">tcp_close</a> from tcp.o(i.tcp_close) referenced from tcp.o(.constdata)
 <LI><a href="#[ae]">tcp_close_wait_in</a> from tcp_state.o(i.tcp_close_wait_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[a5]">tcp_closed_in</a> from tcp_state.o(i.tcp_closed_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[ac]">tcp_closing_in</a> from tcp_state.o(i.tcp_closing_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[bd]">tcp_connect</a> from tcp.o(i.tcp_connect) referenced from tcp.o(.constdata)
 <LI><a href="#[a4]">tcp_create</a> from tcp.o(i.tcp_create) referenced from sock.o(.constdata)
 <LI><a href="#[c2]">tcp_destory</a> from tcp.o(i.tcp_destory) referenced from tcp.o(.constdata)
 <LI><a href="#[80]">tcp_echo_server_thread</a> from tcp_echo_server.o(i.tcp_echo_server_thread) referenced from tcp_echo_server.o(i.tcp_echo_server_start)
 <LI><a href="#[a9]">tcp_established_in</a> from tcp_state.o(i.tcp_established_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[aa]">tcp_fin_wait_1_in</a> from tcp_state.o(i.tcp_fin_wait_1_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[ab]">tcp_fin_wait_2_in</a> from tcp_state.o(i.tcp_fin_wait_2_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[b9]">tcp_free_tmo</a> from tcp.o(i.tcp_free_tmo) referenced from tcp.o(i.tcp_set_delayed_free)
 <LI><a href="#[b8]">tcp_keepalive_tmo</a> from tcp.o(i.tcp_keepalive_tmo) referenced from tcp.o(i.keepalive_start_timer)
 <LI><a href="#[b8]">tcp_keepalive_tmo</a> from tcp.o(i.tcp_keepalive_tmo) referenced from tcp.o(i.tcp_keepalive_tmo)
 <LI><a href="#[af]">tcp_last_ack_in</a> from tcp_state.o(i.tcp_last_ack_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[c0]">tcp_listen</a> from tcp.o(i.tcp_listen) referenced from tcp.o(.constdata)
 <LI><a href="#[a6]">tcp_listen_in</a> from tcp_state.o(i.tcp_listen_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[a]">tcp_ostate_idle_in</a> from tcp_out.o(i.tcp_ostate_idle_in) referenced 2 times from tcp_out.o(.data)
 <LI><a href="#[d]">tcp_ostate_persist_in</a> from tcp_out.o(i.tcp_ostate_persist_in) referenced 2 times from tcp_out.o(.data)
 <LI><a href="#[c]">tcp_ostate_rexmit_in</a> from tcp_out.o(i.tcp_ostate_rexmit_in) referenced 2 times from tcp_out.o(.data)
 <LI><a href="#[b]">tcp_ostate_sending_in</a> from tcp_out.o(i.tcp_ostate_sending_in) referenced 2 times from tcp_out.o(.data)
 <LI><a href="#[81]">tcp_out_timer_tmo</a> from tcp_out.o(i.tcp_out_timer_tmo) referenced from tcp_out.o(i.tcp_out_timer_tmo)
 <LI><a href="#[81]">tcp_out_timer_tmo</a> from tcp_out.o(i.tcp_out_timer_tmo) referenced from tcp_out.o(i.tcp_set_ostate)
 <LI><a href="#[bf]">tcp_recv</a> from tcp.o(i.tcp_recv) referenced from tcp.o(.constdata)
 <LI><a href="#[be]">tcp_send</a> from tcp.o(i.tcp_send) referenced from tcp.o(.constdata)
 <LI><a href="#[bb]">tcp_setopt</a> from tcp.o(i.tcp_setopt) referenced from tcp.o(.constdata)
 <LI><a href="#[a8]">tcp_syn_recvd_in</a> from tcp_state.o(i.tcp_syn_recvd_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[a7]">tcp_syn_sent_in</a> from tcp_state.o(i.tcp_syn_sent_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[ad]">tcp_time_wait_in</a> from tcp_state.o(i.tcp_time_wait_in) referenced from tcp_in.o(.constdata)
 <LI><a href="#[82]">tcp_timewait_tmo</a> from tcp_state.o(i.tcp_timewait_tmo) referenced from tcp_state.o(i.tcp_time_wait)
 <LI><a href="#[84]">tftp_server_thread</a> from tftp_server.o(i.tftp_server_thread) referenced from tftp_server.o(i.tftpd_start)
 <LI><a href="#[83]">tftp_working_thread</a> from tftp_server.o(i.tftp_working_thread) referenced from tftp_server.o(i.tftp_server_thread)
 <LI><a href="#[b3]">udp_bind</a> from udp.o(i.udp_bind) referenced from udp.o(.constdata)
 <LI><a href="#[b0]">udp_close</a> from udp.o(i.udp_close) referenced from udp.o(.constdata)
 <LI><a href="#[b4]">udp_connect</a> from udp.o(i.udp_connect) referenced from udp.o(.constdata)
 <LI><a href="#[a3]">udp_create</a> from udp.o(i.udp_create) referenced from sock.o(.constdata)
 <LI><a href="#[85]">udp_echo_server</a> from udp_echo_server.o(i.udp_echo_server) referenced from udp_echo_server.o(i.udp_echo_server_start)
 <LI><a href="#[b2]">udp_recvfrom</a> from udp.o(i.udp_recvfrom) referenced from udp.o(.constdata)
 <LI><a href="#[b1]">udp_sendto</a> from udp.o(i.udp_sendto) referenced from udp.o(.constdata)
 <LI><a href="#[79]">work_thread</a> from exmsg.o(i.work_thread) referenced from exmsg.o(i.exmsg_start)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c3]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[404]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[405]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[406]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[407]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[cb]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[408]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cc]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[120]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ce]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[d0]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d2]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d3]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d4]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[409]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[d6]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d9]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[dc]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[de]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e0]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[e4]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[40a]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[e6]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e8]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[ea]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ec]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[40b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[fe]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[40c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[40d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[40e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[40f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[410]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[411]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[412]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[413]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[414]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[415]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[416]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[417]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[418]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[419]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[41a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[41b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[41c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[41d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[41e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[41f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[420]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[421]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[422]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[423]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[424]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[425]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[426]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[427]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[428]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[fb]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fd]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[429]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ff]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; os_init &rArr; os_plat_init &rArr; LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[42a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[18b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[102]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[42b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[104]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[42c]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[1fc]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1fd]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[42d]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[106]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[109]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[10b]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[10c]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server_thread
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[10d]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[10f]"></a>isprint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isprint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isprint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[111]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>

<P><STRONG><a name="[113]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_remove
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_request
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_client_info
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_parese
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_server_thread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server_thread
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cmd_list
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_request
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_packet
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_oack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_resend
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_parse_oack
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_option
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server_start
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftpd_start
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_put
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_get
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_start
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_time
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[115]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntop
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntoa
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_option
</UL>

<P><STRONG><a name="[116]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
</UL>

<P><STRONG><a name="[118]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[119]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[117]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d7]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[11d]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[dd]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[e5]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[cf]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[11e]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[121]"></a>sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_parese
</UL>

<P><STRONG><a name="[123]"></a>__0scanf</STRONG> (Thumb, 26 bytes, Stack size 56 bytes, __0scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[16f]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[125]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_parse_oack
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
</UL>

<P><STRONG><a name="[128]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[42f]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[430]"></a>_ftell$unlocked</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[431]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[131]"></a>ftell</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ftell_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ftell &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
</UL>

<P><STRONG><a name="[132]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[133]"></a>fseek</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fseek_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fseek &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
</UL>

<P><STRONG><a name="[134]"></a>feof</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, feof_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = feof &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
</UL>

<P><STRONG><a name="[135]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[136]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
</UL>

<P><STRONG><a name="[139]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[13a]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[13b]"></a>strtok</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
</UL>

<P><STRONG><a name="[39b]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_parese
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
</UL>

<P><STRONG><a name="[32b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_request
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mime_find
</UL>

<P><STRONG><a name="[24f]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_find
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
</UL>

<P><STRONG><a name="[223]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_query_field
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_option
</UL>

<P><STRONG><a name="[13d]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_find
</UL>

<P><STRONG><a name="[221]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_find
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_query_field
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_parse_oack
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_option
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write_in
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read_out
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_copy
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_hwaddr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_copy
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[13f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[432]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_fill
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recvfrom
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_text
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[143]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[142]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_alloc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc (via Veneer)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[433]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[145]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntop
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_set_start
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_set_property
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
</UL>

<P><STRONG><a name="[28d]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_insert
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_request
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_request
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_parse_oack
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[147]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
</UL>

<P><STRONG><a name="[435]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isprint
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>

<P><STRONG><a name="[10a]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[436]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[437]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[438]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[439]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[14a]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ef]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[14c]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; os_mutex_init &rArr; mutex_init &rArr; os_event_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[43a]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[11a]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11b]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[11c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[cd]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[112]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e7]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[e9]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[14e]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[df]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[151]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[db]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[e3]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[152]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[154]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[122]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[6e]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[157]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[159]"></a>_scanf_wctomb</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[15b]"></a>_scanf_wstring</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[12c]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[15c]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[12e]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[15f]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[f6]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[f8]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[13c]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[43b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[43e]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[43f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[440]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[149]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[150]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[73]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[441]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[16c]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[16d]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[eb]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ed]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[153]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[155]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[173]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[156]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[15a]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[442]"></a>___backspace$unlocked$orig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, backspace.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>___backspace$unlocked</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, backspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ___backspace$unlocked
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ungetc_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[17c]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[17a]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[187]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[443]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[18a]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[444]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = setvbuf &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[158]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, _mbrtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[14f]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[160]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[14b]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[163]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[162]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[fc]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[fa]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[16b]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[114]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[124]"></a>__vfscanf_char_file</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, scanf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>

<P><STRONG><a name="[165]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[177]"></a>_ungetc_internal</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ungetc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___backspace$unlocked
</UL>

<P><STRONG><a name="[445]"></a>ungetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ungetc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>fgets</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fgets_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fgets &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
</UL>

<P><STRONG><a name="[185]"></a>puts</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, puts_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = puts &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_request
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_parese
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_server_thread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>

<P><STRONG><a name="[186]"></a>fread</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, freadfast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
</UL>

<P><STRONG><a name="[189]"></a>fwrite</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[17b]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[101]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[17f]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[17e]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[180]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[183]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Finalize
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[18d]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[18e]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[18f]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[3f7]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[18c]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[446]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[194]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[193]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[197]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[195]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[196]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[167]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[172]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[168]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[171]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[198]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_plat_s.o(SWITCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; os_switch_ctx
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_switch_ctx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>CmdError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[19d]"></a>CmdResp1Error</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[19e]"></a>CmdResp2Error</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[19f]"></a>CmdResp3Error</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1a0]"></a>CmdResp6Error</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1a1]"></a>CmdResp7Error</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1ec]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[1e9]"></a>DMA_DeInit</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[1eb]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[1e8]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[1ea]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMAClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>ETH_DMAITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMAITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[1c4]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMAReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[343]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32f4x7_eth.o(i.ETH_DMARxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_open
</UL>

<P><STRONG><a name="[1c3]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_DMATransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[342]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f4x7_eth.o(i.ETH_DMATxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_open
</UL>

<P><STRONG><a name="[1a4]"></a>ETH_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4x7_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[1c1]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[1af]"></a>ETH_GetCurrentTxBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lan8720.o(i.ETH_GetCurrentTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_xmit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>ETH_GetDMAFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_GetDMAFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>ETH_GetDMARxDescFrameLength</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_GetDMARxDescFrameLength))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
</UL>

<P><STRONG><a name="[1a6]"></a>ETH_GetRxPktSize</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f4x7_eth.o(i.ETH_GetRxPktSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_GetRxPktSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescFrameLength
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_GetSoftwareResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[344]"></a>ETH_GetTransmitProcessState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_GetTransmitProcessState))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_xmit
</UL>

<P><STRONG><a name="[1a9]"></a>ETH_Get_Received_Frame_interrupt</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f4x7_eth.o(i.ETH_Get_Received_Frame_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_Get_Received_Frame_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>ETH_IRQHandler</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, netif_disc.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ETH_IRQHandler &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Tx_Packet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetCurrentTxBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame_interrupt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMAFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_in
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_out
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>ETH_Init</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, stm32f4x7_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[341]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_open
</UL>

<P><STRONG><a name="[1b9]"></a>ETH_MACDMA_Config</STRONG> (Thumb, 126 bytes, Stack size 200 bytes, lan8720.o(i.ETH_MACDMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[1c2]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[1c0]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[340]"></a>ETH_Mem_Malloc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lan8720.o(i.ETH_Mem_Malloc))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_open
</UL>

<P><STRONG><a name="[1b8]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4x7_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[1bb]"></a>ETH_SoftwareReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[1bf]"></a>ETH_Start</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f4x7_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_open
</UL>

<P><STRONG><a name="[1bd]"></a>ETH_StructInit</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[1b3]"></a>ETH_Tx_Packet</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lan8720.o(i.ETH_Tx_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_xmit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4x7_eth.o(i.ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[1e4]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1d6]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1c5]"></a>FindSCR</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, sdio_sdcard.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[1cc]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1cd]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>IsCardProgramming</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sdio_sdcard.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsCardProgramming &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[1c9]"></a>LAN8720_Init</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, lan8720.o(i.LAN8720_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LAN8720_Init &rArr; ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_NVICConfiguration
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_open
</UL>

<P><STRONG><a name="[1cf]"></a>LCD_Clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1d2]"></a>LCD_Display_Dir</STRONG> (Thumb, 200 bytes, Stack size 36 bytes, lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1d4]"></a>LCD_Init</STRONG> (Thumb, 10074 bytes, Stack size 168 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plat_init
</UL>

<P><STRONG><a name="[1da]"></a>LCD_RD_DATA</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1de]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcd.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1d3]"></a>LCD_Scan_Dir</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[1d0]"></a>LCD_SetCursor</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[1dc]"></a>LCD_WR_DATA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1d9]"></a>LCD_WR_REG</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1d1]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[1db]"></a>LCD_WriteReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>NVIC_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_NVICConfiguration
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[374]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plat_init
</UL>

<P><STRONG><a name="[1ba]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1a5]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[1d5]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1ca]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1ef]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1b5]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e3]"></a>RTC_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtc.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WKUP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e5]"></a>SDEnWideBus</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[19c]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[1f5]"></a>SDIO_Clock_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Clock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1c7]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[19b]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[1f7]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[49]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f8]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1f0]"></a>SDIO_Register_Deinit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Register_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1c6]"></a>SDIO_SendCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1f9]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1e7]"></a>SD_DMA_Config</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, sdio_sdcard.o(i.SD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1ed]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1f3]"></a>SD_GetCardInfo</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1ee]"></a>SD_Init</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Register_Deinit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1f2]"></a>SD_InitializeCards</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1f1]"></a>SD_PowerON</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_PowerON &rArr; CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1e6]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_ProcessIRQSrc &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[1fa]"></a>SD_ReadBlock</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[1fe]"></a>SD_ReadDisk</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1ff]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 666 bytes, Stack size 64 bytes, sdio_sdcard.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[1f4]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_SelectDeselect &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1f6]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[200]"></a>SD_WriteBlock</STRONG> (Thumb, 768 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[201]"></a>SD_WriteDisk</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[202]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 788 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_ETH_MediaInterfaceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[272]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_plat.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTick_Handler &rArr; os_time_tick &rArr; os_event_wakeup_task &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[375]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plat_init
</UL>

<P><STRONG><a name="[6a]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART1_IRQHandler &rArr; os_queue_release &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e1]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[206]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3e2]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[209]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[207]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[20a]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[20c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[176]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[20d]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[191]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[11f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c4]"></a>_mutex_acquire</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_plat.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[c5]"></a>_mutex_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_plat.o(i._mutex_free))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[c6]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_plat.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_initialize &rArr; os_mutex_init &rArr; mutex_init &rArr; os_event_init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[c7]"></a>_mutex_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_plat.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _mutex_release &rArr; os_mutex_unlock &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[12f]"></a>_sys_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_plat.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _sys_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[105]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_plat.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[12b]"></a>_sys_flen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_plat.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[129]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_plat.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[138]"></a>_sys_open</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, os_plat.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[179]"></a>_sys_read</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_plat.o(i._sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _sys_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_read
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isprint
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[15d]"></a>_sys_seek</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_plat.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _sys_seek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[15e]"></a>_sys_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, os_plat.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _sys_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[192]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_plat.o(i._ttywrch))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[22e]"></a>arp_clear</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, arp.o(i.arp_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arp_clear &rArr; cache_clear_all &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clear_all
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_close
</UL>

<P><STRONG><a name="[232]"></a>arp_find</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, arp.o(i.arp_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_find &rArr; cache_find &rArr; nlist_insert_first
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_local_broadcast
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_direct_broadcast
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_broadcast_addr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_find
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_out
</UL>

<P><STRONG><a name="[237]"></a>arp_in</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, arp.o(i.arp_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = arp_in &rArr; cache_insert &rArr; cache_send_all &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_reply
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_in
</UL>

<P><STRONG><a name="[23f]"></a>arp_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, arp.o(i.arp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = arp_init &rArr; cache_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_init
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[242]"></a>arp_make_gratuitous</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arp.o(i.arp_make_gratuitous))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = arp_make_gratuitous &rArr; arp_make_request &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_open
</UL>

<P><STRONG><a name="[23e]"></a>arp_make_reply</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arp.o(i.arp_make_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = arp_make_reply &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_buf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
</UL>

<P><STRONG><a name="[22c]"></a>arp_make_request</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, arp.o(i.arp_make_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = arp_make_request &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_buf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_broadcast_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_gratuitous
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_tmo
</UL>

<P><STRONG><a name="[245]"></a>arp_resolve</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, arp.o(i.arp_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = arp_resolve &rArr; arp_make_request &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_buf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_find
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_entry_set
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_out
</UL>

<P><STRONG><a name="[24a]"></a>arp_update_from_ipbuf</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, arp.o(i.arp_update_from_ipbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = arp_update_from_ipbuf &rArr; cache_insert &rArr; cache_send_all &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_match
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_in
</UL>

<P><STRONG><a name="[255]"></a>checksum16</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tools.o(i.checksum16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_peso
</UL>

<P><STRONG><a name="[254]"></a>checksum_peso</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tools.o(i.checksum_peso))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = checksum_peso &rArr; pktbuf_checksum16 &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum16
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
</UL>

<P><STRONG><a name="[27b]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1fb]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[222]"></a>dbg_print</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dbg.o(i.dbg_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_in
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_check_tmo
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_netif_in
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netif_in
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_func
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_fill
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_add_header
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_register_layer
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_out
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_in
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_in
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_set_default_server
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_insert_server
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_find
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_query
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_query_field
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_update_from_ipbuf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_gratuitous
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_send_all
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clear_all
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_alloc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_tmo
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tools_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_plat_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_start
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_active
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_out
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_xmit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_join
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_out
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_remove
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_add
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_join
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_insert
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_copy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_read_send
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_win_update
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset_for_tcp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_remove
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setopt (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_start (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_insert (via Veneer)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free (via Veneer)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_child (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_tmo (via Veneer)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc (via Veneer)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive_start_timer (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_setsockopt
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_sendto
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recvfrom
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recv
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_listen
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_bind
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_accept
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_setsockopt_req_in
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_sendto_req_in
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send_req_in
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_recvfrom_req_in
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_recv_req_in
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_listen_req_in
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_destroy_req_in
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_create_req_in
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_connect_req_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close_req_in
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind_req_in
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_accept_req_in
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_setopt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_recv
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_create
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recvfrom
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc_list
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_tmo
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cal_rto
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sync_option
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_timer_tmo
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_rexmit_in
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_begin_rto
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_send_data
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait_in
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_in
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_last_ack_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_2_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closed_in
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_wait_in
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_data_to_rcvbuf
</UL>

<P><STRONG><a name="[271]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plat_init
</UL>

<P><STRONG><a name="[1d8]"></a>delay_ms</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1dd]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[273]"></a>delay_xms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_xms))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[275]"></a>dir_sdi</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[280]"></a>disk_initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[281]"></a>disk_ioctl</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_ioctl &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[283]"></a>disk_read</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = disk_read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[2d8]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[284]"></a>disk_write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[285]"></a>dns_alloc_req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dns.o(i.dns_alloc_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dns_alloc_req &rArr; mblock_alloc &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
</UL>

<P><STRONG><a name="[286]"></a>dns_entry_find</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, dns.o(i.dns_entry_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dns_entry_find &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
</UL>

<P><STRONG><a name="[28e]"></a>dns_free_req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dns.o(i.dns_free_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dns_free_req &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
</UL>

<P><STRONG><a name="[28f]"></a>dns_in</STRONG> (Thumb, 934 bytes, Stack size 72 bytes, dns.o(i.dns_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dns_in &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;domain_name_skip
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;domain_name_cmp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_remove
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_fail
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_insert
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
</UL>

<P><STRONG><a name="[294]"></a>dns_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dns.o(i.dns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = dns_init &rArr; dns_set_default_server &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_set_default_server
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_insert_server
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[295]"></a>dns_insert_server</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, dns.o(i.dns_insert_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dns_insert_server &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_str
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[3e6]"></a>dns_is_arrive</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dns.o(i.dns_is_arrive))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
</UL>

<P><STRONG><a name="[8b]"></a>dns_req_in</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, dns.o(i.dns_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = dns_req_in &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_set_loop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_str
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_find
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_query
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_add
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_gethostbyname_r)
</UL>
<P><STRONG><a name="[299]"></a>dns_server_next</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dns.o(i.dns_server_next))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_fail
</UL>

<P><STRONG><a name="[296]"></a>dns_set_default_server</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, dns.o(i.dns_set_default_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = dns_set_default_server &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_str
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[2aa]"></a>do_tftp_get</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, tftp_client.o(i.do_tftp_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = do_tftp_get &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_connect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_close
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_request
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_get
</UL>

<P><STRONG><a name="[2af]"></a>do_tftp_put</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, tftp_client.o(i.do_tftp_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = do_tftp_put &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_connect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_close
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_request
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_put
</UL>

<P><STRONG><a name="[235]"></a>ether_broadcast_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ether.o(i.ether_broadcast_addr))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_find
</UL>

<P><STRONG><a name="[95]"></a>ether_in</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, ether.o(i.ether_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = ether_in &rArr; ipv4_in &rArr; ip_frag_in &rArr; ip_normal_in &rArr; udp_in &rArr; dns_in &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_update_from_ipbuf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ether.o(.constdata)
</UL>
<P><STRONG><a name="[2b3]"></a>ether_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ether.o(i.ether_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ether_init &rArr; netif_register_layer &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_register_layer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[244]"></a>ether_raw_out</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, ether.o(i.ether_raw_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_fill
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_add_header
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_out
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_in
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_out
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_reply
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_send_all
</UL>

<P><STRONG><a name="[2b8]"></a>exmsg_func_exec</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, exmsg.o(i.exmsg_func_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_self
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_send
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_create
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_setsockopt
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_sendto
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recvfrom
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recv
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_listen
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_bind
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_accept
</UL>

<P><STRONG><a name="[2bb]"></a>exmsg_init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, exmsg.o(i.exmsg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = exmsg_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[2bd]"></a>exmsg_netif_in</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, exmsg.o(i.exmsg_netif_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = exmsg_netif_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_send
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_in
</UL>

<P><STRONG><a name="[2be]"></a>exmsg_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exmsg.o(i.exmsg_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = exmsg_start &rArr; sys_thread_create &rArr; os_task_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_start
</UL>

<P><STRONG><a name="[216]"></a>f_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[21e]"></a>f_lseek</STRONG> (Thumb, 718 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[2c4]"></a>f_mount</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_init
</UL>

<P><STRONG><a name="[21a]"></a>f_open</STRONG> (Thumb, 388 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[21b]"></a>f_read</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[2c0]"></a>f_sync</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[21f]"></a>f_write</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[26e]"></a>ff_convert</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2c7]"></a>ff_cre_syncobj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff_system.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ff_cre_syncobj &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[2c6]"></a>ff_del_syncobj</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ff_system.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ff_del_syncobj &rArr; os_sem_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[2c9]"></a>ff_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ff_memalloc &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2cf]"></a>ff_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ff_memfree &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2d3]"></a>ff_rel_grant</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff_system.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ff_rel_grant &rArr; os_sem_release &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[2d5]"></a>ff_req_grant</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff_system.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ff_req_grant &rArr; os_sem_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[261]"></a>ff_wtoupper</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[75]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[2db]"></a>fixq_count</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fixq.o(i.fixq_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fixq_count &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_in
</UL>

<P><STRONG><a name="[2de]"></a>fixq_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fixq.o(i.fixq_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fixq_destroy &rArr; nlocker_destroy &rArr; sys_mutex_free &rArr; os_mutex_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_destroy
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
</UL>

<P><STRONG><a name="[2bc]"></a>fixq_init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, fixq.o(i.fixq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = fixq_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_destroy
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_create
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
</UL>

<P><STRONG><a name="[2e1]"></a>fixq_recv</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fixq.o(i.fixq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fixq_recv &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_in
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_out
</UL>

<P><STRONG><a name="[2ba]"></a>fixq_send</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fixq.o(i.fixq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fixq_send &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_netif_in
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_out
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_in
</UL>

<P><STRONG><a name="[74]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[20e]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[26b]"></a>get_fat</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[2cb]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2f8]"></a>httpd_start</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, httpd.o(i.httpd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = httpd_start &rArr; x_socket &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_create
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_create
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_listen
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_bind
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[301]"></a>icmpv4_in</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, icmpv4.o(i.icmpv4_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = icmpv4_in &rArr; icmpv4_echo_reply &rArr; icmpv4_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_echo_reply
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
</UL>

<P><STRONG><a name="[304]"></a>icmpv4_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, icmpv4.o(i.icmpv4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = icmpv4_init &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[306]"></a>icmpv4_out_unreach</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, icmpv4.o(i.icmpv4_out_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = icmpv4_out_unreach &rArr; icmpv4_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
</UL>

<P><STRONG><a name="[39e]"></a>ipaddr_1_cnt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_1_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_add
</UL>

<P><STRONG><a name="[28b]"></a>ipaddr_copy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_copy))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_set_default_server
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_insert_server
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_add
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_add
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_child (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_init
</UL>

<P><STRONG><a name="[22b]"></a>ipaddr_from_buf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_from_buf))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_update_from_ipbuf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_tmo
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind (via Veneer)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_connect
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[297]"></a>ipaddr_from_str</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ipaddr.o(i.ipaddr_from_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipaddr_from_str
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_set_default_server
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_insert_server
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_addr
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_init
</UL>

<P><STRONG><a name="[346]"></a>ipaddr_get_any</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_get_any))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_active
</UL>

<P><STRONG><a name="[314]"></a>ipaddr_get_host</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ipaddr.o(i.ipaddr_get_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipaddr_get_host
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_direct_broadcast
</UL>

<P><STRONG><a name="[315]"></a>ipaddr_get_net</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ipaddr.o(i.ipaddr_get_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipaddr_get_net
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_match
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_active
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_find
</UL>

<P><STRONG><a name="[287]"></a>ipaddr_is_any</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_is_any))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_find
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_update_tmo
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_insert
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_find (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind (via Veneer)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_recv
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_find
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_find
</UL>

<P><STRONG><a name="[234]"></a>ipaddr_is_direct_broadcast</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ipaddr.o(i.ipaddr_is_direct_broadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ipaddr_is_direct_broadcast &rArr; ipaddr_get_host
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_get_host
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_match
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_find
</UL>

<P><STRONG><a name="[23b]"></a>ipaddr_is_equal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_is_equal))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_out
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_set_default_server
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_insert_server
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_match
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_remove
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_find
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_add
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_find
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_find (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_conn_exist (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_find
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_find
</UL>

<P><STRONG><a name="[233]"></a>ipaddr_is_local_broadcast</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_is_local_broadcast))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_match
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_find
</UL>

<P><STRONG><a name="[24b]"></a>ipaddr_is_match</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ipaddr.o(i.ipaddr_is_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ipaddr_is_match &rArr; ipaddr_is_direct_broadcast &rArr; ipaddr_get_host
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_local_broadcast
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_direct_broadcast
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_get_net
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_update_from_ipbuf
</UL>

<P><STRONG><a name="[348]"></a>ipaddr_set_all_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_set_all_1))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_active
</UL>

<P><STRONG><a name="[289]"></a>ipaddr_set_any</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_set_any))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_remove
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_add
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
</UL>

<P><STRONG><a name="[29b]"></a>ipaddr_set_loop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_set_loop))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
</UL>

<P><STRONG><a name="[243]"></a>ipaddr_to_buf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipaddr.o(i.ipaddr_to_buf))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_reply
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept (via Veneer)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
</UL>

<P><STRONG><a name="[2a1]"></a>ipv4_in</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, ipv4.o(i.ipv4_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = ipv4_in &rArr; ip_frag_in &rArr; ip_normal_in &rArr; udp_in &rArr; dns_in &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_match
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphdr_ntohs
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netif_in
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_in
</UL>

<P><STRONG><a name="[319]"></a>ipv4_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipv4.o(i.ipv4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ipv4_init &rArr; frag_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_init
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[305]"></a>ipv4_out</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, ipv4.o(i.ipv4_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_add_header
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_out
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_find
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_header_size
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphdr_htons
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
</UL>

<P><STRONG><a name="[212]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[31d]"></a>loop_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, loop.o(i.loop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = loop_init &rArr; netif_set_active &rArr; netif_set_default &rArr; rt_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_str
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_active
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[100]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = main &rArr; os_init &rArr; os_plat_init &rArr; LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[24c]"></a>mblock_alloc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mblock.o(i.mblock_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mblock_alloc &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_netif_in
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_req
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_alloc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_add
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_alloc
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_free (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_create
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc
</UL>

<P><STRONG><a name="[231]"></a>mblock_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mblock.o(i.mblock_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_notify
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_netif_in
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_free_req
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_clear
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free (via Veneer)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_create
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_close
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free_list
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
</UL>

<P><STRONG><a name="[250]"></a>mblock_init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, mblock.o(i.mblock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_destroy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_create
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_init
</UL>

<P><STRONG><a name="[32e]"></a>mutex_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_mutex.o(i.mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mutex_init &rArr; os_event_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>

<P><STRONG><a name="[330]"></a>net_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, net.o(i.net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = net_init &rArr; loop_init &rArr; netif_set_active &rArr; netif_set_default &rArr; rt_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tools_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_plat_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_init
</UL>

<P><STRONG><a name="[331]"></a>net_plat_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, net_plat.o(i.net_plat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = net_plat_init &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[33a]"></a>net_start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net.o(i.net_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = net_start &rArr; exmsg_start &rArr; sys_thread_create &rArr; os_task_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_init
</UL>

<P><STRONG><a name="[241]"></a>net_timer_add</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, timer.o(i.net_timer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_timer_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_timer
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_delayed_free (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_tmo (via Veneer)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive_start_timer (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_timer_tmo
</UL>

<P><STRONG><a name="[33b]"></a>net_timer_check_tmo</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, timer.o(i.net_timer_check_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = net_timer_check_tmo &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
</UL>

<P><STRONG><a name="[3e8]"></a>net_timer_first_tmo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.net_timer_first_tmo))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
</UL>

<P><STRONG><a name="[335]"></a>net_timer_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer.o(i.net_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = net_timer_init &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[33c]"></a>net_timer_remove</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, timer.o(i.net_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_all_timers (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_start (via Veneer)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_restart (via Veneer)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_delayed_free (via Veneer)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
</UL>

<P><STRONG><a name="[33d]"></a>netdev_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, test_net.o(i.netdev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = netdev_init &rArr; netif_set_active &rArr; netif_set_default &rArr; rt_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_str
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_active
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_init
</UL>

<P><STRONG><a name="[b6]"></a>netif_disc_close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif_disc.o(i.netif_disc_close))
<BR>[Address Reference Count : 1]<UL><LI> netif_disc.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>netif_disc_open</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, netif_disc.o(i.netif_disc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = netif_disc_open &rArr; LAN8720_Init &rArr; ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Mem_Malloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_hwaddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif_disc.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>netif_disc_xmit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, netif_disc.o(i.netif_disc_xmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = netif_disc_xmit &rArr; pktbuf_read &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Tx_Packet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetCurrentTxBuffer
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetTransmitProcessState
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_out
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif_disc.o(.constdata)
</UL>
<P><STRONG><a name="[2a2]"></a>netif_get_in</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, netif.o(i.netif_get_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netif_get_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_recv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netif_in
</UL>

<P><STRONG><a name="[1b0]"></a>netif_get_out</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, netif.o(i.netif_get_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netif_get_out &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_recv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_xmit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_xmit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[334]"></a>netif_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, netif.o(i.netif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = netif_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[31e]"></a>netif_open</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, netif.o(i.netif_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = netif_open &rArr; fixq_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_destroy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_set_any
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_layer
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_init
</UL>

<P><STRONG><a name="[311]"></a>netif_out</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, netif.o(i.netif_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = netif_out &rArr; netif_put_out &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_out
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
</UL>

<P><STRONG><a name="[1ac]"></a>netif_put_in</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, netif.o(i.netif_put_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = netif_put_in &rArr; exmsg_netif_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_count
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_send
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_netif_in
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_xmit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>netif_put_out</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, netif.o(i.netif_put_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netif_put_out &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_send
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_out
</UL>

<P><STRONG><a name="[2b4]"></a>netif_register_layer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, netif.o(i.netif_register_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = netif_register_layer &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_init
</UL>

<P><STRONG><a name="[320]"></a>netif_set_active</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, netif.o(i.netif_set_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = netif_set_active &rArr; netif_set_default &rArr; rt_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_add
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_set_all_1
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_get_net
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_get_any
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_init
</UL>

<P><STRONG><a name="[31f]"></a>netif_set_addr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netif_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_get_any
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_init
</UL>

<P><STRONG><a name="[33e]"></a>netif_set_default</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, netif.o(i.netif_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = netif_set_default &rArr; rt_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_remove
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_add
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_get_any
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_active
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_init
</UL>

<P><STRONG><a name="[33f]"></a>netif_set_hwaddr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, netif.o(i.netif_set_hwaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netif_set_hwaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_open
</UL>

<P><STRONG><a name="[24d]"></a>nlist_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nlist.o(i.nlist_init))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_check_tmo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_alloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_add
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_create
</UL>

<P><STRONG><a name="[2eb]"></a>nlist_insert_after</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nlist.o(i.nlist_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nlist_insert_after &rArr; nlist_insert_first
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_insert
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_insert_blk_list
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_timer
</UL>

<P><STRONG><a name="[246]"></a>nlist_insert_first</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nlist.o(i.nlist_insert_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nlist_insert_first
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_find
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_after
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_insert
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_find
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_add
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_insert_blk_list
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_timer
</UL>

<P><STRONG><a name="[249]"></a>nlist_insert_last</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nlist.o(i.nlist_insert_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nlist_insert_last
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_check_tmo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_add
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_insert
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_insert (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_create
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_insert_blk_list
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_timer
</UL>

<P><STRONG><a name="[230]"></a>nlist_remove</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, nlist.o(i.nlist_remove))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_check_tmo
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_remove
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_clear
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_free
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_find
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_remove
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_find
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_alloc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_remove
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_close
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
</UL>

<P><STRONG><a name="[2df]"></a>nlocker_destroy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nlocker.o(i.nlocker_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nlocker_destroy &rArr; sys_mutex_free &rArr; os_mutex_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_destroy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
</UL>

<P><STRONG><a name="[2e0]"></a>nlocker_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nlocker.o(i.nlocker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_init
</UL>

<P><STRONG><a name="[2dc]"></a>nlocker_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nlocker.o(i.nlocker_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_intlocker_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_count
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_send
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_recv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc_list
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc
</UL>

<P><STRONG><a name="[2dd]"></a>nlocker_unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nlocker.o(i.nlocker_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nlocker_unlock &rArr; sys_mutex_unlock &rArr; os_mutex_unlock &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_intlocker_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_count
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_send
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_recv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc_list
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc
</UL>

<P><STRONG><a name="[350]"></a>ntp_time</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ntp.o(i.ntp_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ntp_time &rArr; request_time &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[2d9]"></a>os_app_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, test_net.o(i.os_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = os_app_init &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_start
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_task_entry
</UL>

<P><STRONG><a name="[2da]"></a>os_app_loop</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, test_net.o(i.os_app_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = os_app_loop &rArr; tftp_start &rArr; do_tftp_put &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server_start
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftpd_start
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_put
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_get
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_start
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_time
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_task_entry
</UL>

<P><STRONG><a name="[359]"></a>os_bitmap_check</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_core.o(i.os_bitmap_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_first
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
</UL>

<P><STRONG><a name="[35a]"></a>os_bitmap_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_core.o(i.os_bitmap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_bitmap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[308]"></a>os_enter_protect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_plat.o(i.os_enter_protect))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_switch_ctx
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_bitmap_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_bitmap_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task_entry
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_wait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_release
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_uninit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_uninit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_head
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_clear
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_remove_wait
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_remove_first
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_add_wait
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait_cnt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_uninit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove_head
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_insert_after
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_first
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_append
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup_task
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_count
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_intlocker_lock
</UL>

<P><STRONG><a name="[35c]"></a>os_event_clear</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, os_event.o(i.os_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_event_clear &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_wakeup
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_uninit
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_uninit
</UL>

<P><STRONG><a name="[32f]"></a>os_event_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_event.o(i.os_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_event_init
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>

<P><STRONG><a name="[361]"></a>os_event_uninit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_event.o(i.os_event_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = os_event_uninit &rArr; os_event_clear &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_clear
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_uninit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>

<P><STRONG><a name="[362]"></a>os_event_wait</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, os_event.o(i.os_event_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_delay
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_add_wait
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_wait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_release
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>

<P><STRONG><a name="[366]"></a>os_event_wait_cnt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_event.o(i.os_event_wait_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_event_wait_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_uninit
</UL>

<P><STRONG><a name="[367]"></a>os_event_wakeup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, os_event.o(i.os_event_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_wakeup
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_remove_first
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_wait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_release
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_release
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
</UL>

<P><STRONG><a name="[368]"></a>os_event_wakeup_task</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_event.o(i.os_event_wakeup_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_event_wakeup_task &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_wakeup
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_remove_wait
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
</UL>

<P><STRONG><a name="[321]"></a>os_init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, os_core.o(i.os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = os_init &rArr; os_plat_init &rArr; LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_bitmap_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_core_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_plat_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30a]"></a>os_leave_protect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_plat.o(i.os_leave_protect))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task_entry
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_wait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_release
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_uninit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_uninit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch_to
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_count
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_intlocker_unlock
</UL>

<P><STRONG><a name="[36d]"></a>os_list_add_head</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_list.o(i.os_list_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_list_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_insert_after
</UL>

<P><STRONG><a name="[36e]"></a>os_list_append</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_list.o(i.os_list_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_list_append
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_delay
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_insert_delete
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
</UL>

<P><STRONG><a name="[2f0]"></a>os_list_first</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_list.o(i.os_list_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_delay
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_bitmap_check
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_task
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
</UL>

<P><STRONG><a name="[36b]"></a>os_list_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_list.o(i.os_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[36f]"></a>os_list_insert_after</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_list.o(i.os_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_list_insert_after &rArr; os_list_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_add_head
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_delay
</UL>

<P><STRONG><a name="[370]"></a>os_list_remove</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_list.o(i.os_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_wakeup
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
</UL>

<P><STRONG><a name="[309]"></a>os_list_remove_head</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_list.o(i.os_list_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_list_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task_entry
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
</UL>

<P><STRONG><a name="[219]"></a>os_mem_alloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_mem.o(i.os_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_create
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[217]"></a>os_mem_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_mem.o(i.os_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task_entry
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_create
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_free
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[36a]"></a>os_mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_mem.o(i.os_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[371]"></a>os_mutex_create</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_mutex.o(i.os_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_create
</UL>

<P><STRONG><a name="[372]"></a>os_mutex_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_mutex.o(i.os_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = os_mutex_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_uninit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</UL>

<P><STRONG><a name="[214]"></a>os_mutex_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_mutex.o(i.os_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mutex_init &rArr; mutex_init &rArr; os_event_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[213]"></a>os_mutex_lock</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, os_mutex.o(i.os_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>

<P><STRONG><a name="[373]"></a>os_mutex_uninit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_mutex.o(i.os_mutex_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_mutex_uninit &rArr; os_event_clear &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_clear
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_free
</UL>

<P><STRONG><a name="[215]"></a>os_mutex_unlock</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, os_mutex.o(i.os_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_mutex_unlock &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
</UL>

<P><STRONG><a name="[369]"></a>os_plat_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, os_plat.o(i.os_plat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = os_plat_init &rArr; LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[376]"></a>os_queue_create</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, os_queue.o(i.os_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = os_queue_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[208]"></a>os_queue_release</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, os_queue.o(i.os_queue_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = os_queue_release &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write_in
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_copy
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[37a]"></a>os_queue_wait</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, os_queue.o(i.os_queue_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = os_queue_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_write_in
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read_out
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_read
</UL>

<P><STRONG><a name="[204]"></a>os_sched_run</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, os_core.o(i.os_sched_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_sched_run &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_bitmap_check
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_task
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_uninit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_uninit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
</UL>

<P><STRONG><a name="[35e]"></a>os_sched_set_ready</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_core.o(i.os_sched_set_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_bitmap_check
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_append
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_uninit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_clear
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup_task
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
</UL>

<P><STRONG><a name="[364]"></a>os_sched_set_unready</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, os_core.o(i.os_sched_set_unready))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_bitmap_check
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_first
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_uninit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
</UL>

<P><STRONG><a name="[2d1]"></a>os_sem_create</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_sem.o(i.os_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_create
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[2d2]"></a>os_sem_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_sem.o(i.os_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = os_sem_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_uninit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[2d4]"></a>os_sem_release</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os_sem.o(i.os_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_sem_release &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_notify
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>

<P><STRONG><a name="[37e]"></a>os_sem_uninit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_sem.o(i.os_sem_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_sem_uninit &rArr; os_event_uninit &rArr; os_event_clear &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait_cnt
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_uninit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_free
</UL>

<P><STRONG><a name="[2d6]"></a>os_sem_wait</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_sem.o(i.os_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = os_sem_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[324]"></a>os_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_core.o(i.os_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_start &rArr; get_next_task &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_task
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>os_switch_ctx</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.os_switch_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_switch_ctx
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[380]"></a>os_task_create</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, os_task.o(i.os_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = os_task_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_alloc
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
</UL>

<P><STRONG><a name="[382]"></a>os_task_ctx_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_plat.o(i.os_task_ctx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_task_ctx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>

<P><STRONG><a name="[7f]"></a>os_task_exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_task.o(i.os_task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_task_exit &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_insert_delete
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_plat.o(i.os_task_ctx_init)
</UL>
<P><STRONG><a name="[322]"></a>os_task_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_task.o(i.os_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_task_init &rArr; os_task_ctx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_ctx_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[381]"></a>os_task_insert_delete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_core.o(i.os_task_insert_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_task_insert_delete &rArr; os_list_append
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_append
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
</UL>

<P><STRONG><a name="[363]"></a>os_task_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(i.os_task_self))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_self
</UL>

<P><STRONG><a name="[365]"></a>os_task_set_delay</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, os_core.o(i.os_task_set_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_task_set_delay &rArr; os_list_insert_after &rArr; os_list_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_insert_after
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_first
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_append
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
</UL>

<P><STRONG><a name="[35d]"></a>os_task_set_wakeup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_core.o(i.os_task_set_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_task_set_wakeup &rArr; os_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_clear
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup_task
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick
</UL>

<P><STRONG><a name="[1ce]"></a>os_task_sleep</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_task.o(i.os_task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_task_sleep &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_delay
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_unready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sleep
</UL>

<P><STRONG><a name="[323]"></a>os_task_start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_task.o(i.os_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_task_start &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_insert_os
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37c]"></a>os_task_switch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_plat.o(i.os_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
</UL>

<P><STRONG><a name="[37f]"></a>os_task_switch_to</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, os_plat.o(i.os_task_switch_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_task_switch_to
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[384]"></a>os_tick_count</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_core.o(i.os_tick_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_tick_count
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_goes
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_curr
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
</UL>

<P><STRONG><a name="[203]"></a>os_time_tick</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_core.o(i.os_time_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_time_tick &rArr; os_event_wakeup_task &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_set_wakeup
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_set_ready
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove_head
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_first
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_append
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup_task
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[36c]"></a>os_timer_core_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_timer.o(i.os_timer_core_init))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[355]"></a>ping_run</STRONG> (Thumb, 470 bytes, Stack size 128 bytes, ping.o(i.ping_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ping_run &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_count
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntop
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntoa
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_setsockopt
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_sendto
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recvfrom
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sleep
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[2b6]"></a>pktbuf_add_header</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, pktbuf.o(i.pktbuf_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = pktbuf_add_header &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_insert_blk_list
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_first_blk
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc_list
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
</UL>

<P><STRONG><a name="[1aa]"></a>pktbuf_alloc</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, pktbuf.o(i.pktbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_insert_blk_list
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc_list
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_win_update
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset_for_tcp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
</UL>

<P><STRONG><a name="[256]"></a>pktbuf_checksum16</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, pktbuf.o(i.pktbuf_checksum16))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = pktbuf_checksum16 &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum16
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_blk_remain
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_peso
</UL>

<P><STRONG><a name="[307]"></a>pktbuf_copy</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, pktbuf.o(i.pktbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pktbuf_copy &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_blk_remain
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
</UL>

<P><STRONG><a name="[2b5]"></a>pktbuf_fill</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, pktbuf.o(i.pktbuf_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pktbuf_fill &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_blk_remain
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
</UL>

<P><STRONG><a name="[1ad]"></a>pktbuf_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pktbuf.o(i.pktbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pktbuf_free &rArr; pktblock_free_list &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_first_blk
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netif_in
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_send_all
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clear_all
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_xmit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_join
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_join
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free_buf_list
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_close
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recvfrom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_xmit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
</UL>

<P><STRONG><a name="[333]"></a>pktbuf_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pktbuf.o(i.pktbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = pktbuf_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[2ee]"></a>pktbuf_join</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pktbuf.o(i.pktbuf_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pktbuf_join &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_insert_blk_list
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_first_blk
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_join
</UL>

<P><STRONG><a name="[1b2]"></a>pktbuf_read</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, pktbuf.o(i.pktbuf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pktbuf_read &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_blk_remain
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_write_rcv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recvfrom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_xmit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[2b2]"></a>pktbuf_remove_header</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, pktbuf.o(i.pktbuf_remove_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pktbuf_remove_header &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_first_blk
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_blk_next
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_in
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_join
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
</UL>

<P><STRONG><a name="[1b1]"></a>pktbuf_reset_acc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pktbuf.o(i.pktbuf_reset_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pktbuf_reset_acc
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_first_blk
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_in
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_out
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recvfrom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_disc_xmit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_send_data
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_peso
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_data_to_rcvbuf
</UL>

<P><STRONG><a name="[263]"></a>pktbuf_resize</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, pktbuf.o(i.pktbuf_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_insert_blk_list
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_first_blk
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_blk_next
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sync_option
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_send_data
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_data_to_rcvbuf
</UL>

<P><STRONG><a name="[264]"></a>pktbuf_seek</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pktbuf.o(i.pktbuf_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pktbuf_seek &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_first_blk
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_blk_remain
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_send_data
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_data_to_rcvbuf
</UL>

<P><STRONG><a name="[238]"></a>pktbuf_set_cont</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, pktbuf.o(i.pktbuf_set_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = pktbuf_set_cont &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_first_blk
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_blk_next
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_in
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_update_from_ipbuf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
</UL>

<P><STRONG><a name="[1ab]"></a>pktbuf_write</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, pktbuf.o(i.pktbuf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pktbuf_write &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_blk_remain
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_read_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[26c]"></a>put_fat</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[9e]"></a>raw_bind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = raw_bind &rArr; sock_bind &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>raw_close</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, raw.o(i.raw_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = raw_close &rArr; pktbuf_free &rArr; pktblock_free_list &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_uninit
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>raw_connect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(i.raw_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = raw_connect &rArr; sock_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>raw_create</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, raw.o(i.raw_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = raw_create &rArr; sock_wait_init &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_uninit
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock.o(.constdata)
</UL>
<P><STRONG><a name="[303]"></a>raw_in</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, raw.o(i.raw_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = raw_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_find
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
</UL>

<P><STRONG><a name="[337]"></a>raw_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, raw.o(i.raw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = raw_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[351]"></a>request_time</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, ntp.o(i.request_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = request_time &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_addr
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_setsockopt
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recv
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u32
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntp_time
</UL>

<P><STRONG><a name="[347]"></a>rt_add</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ipv4.o(i.rt_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = rt_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_1_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_active
</UL>

<P><STRONG><a name="[31b]"></a>rt_find</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ipv4.o(i.rt_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_find &rArr; ipaddr_get_net
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_get_net
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind (via Veneer)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_connect (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
</UL>

<P><STRONG><a name="[31a]"></a>rt_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ipv4.o(i.rt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = rt_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_init
</UL>

<P><STRONG><a name="[349]"></a>rt_remove</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ipv4.o(i.rt_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = rt_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>

<P><STRONG><a name="[3a2]"></a>show_cmd_list</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tftp_client.o(i.show_cmd_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = show_cmd_list &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_start
</UL>

<P><STRONG><a name="[86]"></a>sock_accept_req_in</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, sock.o(i.sock_accept_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sock_accept_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_add
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_accept)
</UL>
<P><STRONG><a name="[392]"></a>sock_bind</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sock.o(i.sock_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sock_bind &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_find
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[87]"></a>sock_bind_req_in</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sock.o(i.sock_bind_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sock_bind_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_bind)
</UL>
<P><STRONG><a name="[88]"></a>sock_close_req_in</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sock.o(i.sock_close_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sock_close_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_add
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_close)
</UL>
<P><STRONG><a name="[394]"></a>sock_connect</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sock.o(i.sock_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sock_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>

<P><STRONG><a name="[8a]"></a>sock_connect_req_in</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sock.o(i.sock_connect_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sock_connect_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_add
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_connect)
</UL>
<P><STRONG><a name="[92]"></a>sock_create_req_in</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sock.o(i.sock_create_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sock_create_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_socket)
</UL>
<P><STRONG><a name="[89]"></a>sock_destroy_req_in</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sock.o(i.sock_destroy_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sock_destroy_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_close)
</UL>
<P><STRONG><a name="[395]"></a>sock_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sock.o(i.sock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_set_any
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_create
</UL>

<P><STRONG><a name="[8c]"></a>sock_listen_req_in</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sock.o(i.sock_listen_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sock_listen_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_listen)
</UL>
<P><STRONG><a name="[a1]"></a>sock_recv</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, sock.o(i.sock_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sock_recv &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Address Reference Count : 2]<UL><LI> raw.o(.constdata)
<LI> udp.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>sock_recv_req_in</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, sock.o(i.sock_recv_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sock_recv_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_add
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_recv)
</UL>
<P><STRONG><a name="[8e]"></a>sock_recvfrom_req_in</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sock.o(i.sock_recvfrom_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sock_recvfrom_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_add
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_recvfrom)
</UL>
<P><STRONG><a name="[a0]"></a>sock_send</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, sock.o(i.sock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = sock_send &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Address Reference Count : 2]<UL><LI> raw.o(.constdata)
<LI> udp.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>sock_send_req_in</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sock.o(i.sock_send_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sock_send_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_add
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_send)
</UL>
<P><STRONG><a name="[90]"></a>sock_sendto_req_in</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sock.o(i.sock_sendto_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sock_sendto_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_add
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_sendto)
</UL>
<P><STRONG><a name="[9d]"></a>sock_setopt</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, sock.o(i.sock_setopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sock_setopt &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setopt (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> raw.o(.constdata)
<LI> udp.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>sock_setsockopt_req_in</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sock.o(i.sock_setsockopt_req_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sock_setsockopt_req_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(i.x_setsockopt)
</UL>
<P><STRONG><a name="[393]"></a>sock_uninit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sock.o(i.sock_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sock_uninit &rArr; sock_wait_destroy &rArr; sys_sem_free &rArr; os_sem_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_create
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_close
</UL>

<P><STRONG><a name="[3a5]"></a>sock_wait_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sock.o(i.sock_wait_add))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_sendto_req_in
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send_req_in
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_recvfrom_req_in
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_recv_req_in
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_connect_req_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close_req_in
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_accept_req_in
</UL>

<P><STRONG><a name="[3a7]"></a>sock_wait_destroy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sock.o(i.sock_wait_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sock_wait_destroy &rArr; sys_sem_free &rArr; os_sem_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free (via Veneer)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_uninit
</UL>

<P><STRONG><a name="[3a8]"></a>sock_wait_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sock.o(i.sock_wait_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sock_wait_enter &rArr; sys_sem_wait &rArr; os_sem_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_sendto
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recvfrom
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recv
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_accept
</UL>

<P><STRONG><a name="[396]"></a>sock_wait_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sock.o(i.sock_wait_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sock_wait_init &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_create
</UL>

<P><STRONG><a name="[3a9]"></a>sock_wait_leave</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sock.o(i.sock_wait_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sock_wait_leave &rArr; sys_sem_notify &rArr; os_sem_release &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
</UL>

<P><STRONG><a name="[399]"></a>sock_wakeup</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sock.o(i.sock_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sock_wakeup &rArr; sock_wait_leave &rArr; sys_sem_notify &rArr; os_sem_release &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_timer_tmo
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in
</UL>

<P><STRONG><a name="[336]"></a>socket_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sock.o(i.socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[34e]"></a>sys_intlocker_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_intlocker_lock))
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
</UL>

<P><STRONG><a name="[34f]"></a>sys_intlocker_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_intlocker_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
</UL>

<P><STRONG><a name="[2fc]"></a>sys_mutex_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>

<P><STRONG><a name="[2fd]"></a>sys_mutex_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_mutex_free &rArr; os_mutex_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_destroy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>

<P><STRONG><a name="[227]"></a>sys_mutex_lock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_plat.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_client
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_client
</UL>

<P><STRONG><a name="[228]"></a>sys_mutex_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_mutex_unlock &rArr; os_mutex_unlock &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_client
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_client
</UL>

<P><STRONG><a name="[29c]"></a>sys_sem_create</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_plat.o(i.sys_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>

<P><STRONG><a name="[29d]"></a>sys_sem_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_sem_free &rArr; os_sem_free &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_destroy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_destroy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>

<P><STRONG><a name="[29e]"></a>sys_sem_notify</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_sem_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_sem_notify &rArr; os_sem_release &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_send
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_recv
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_func
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_remove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_leave
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_client
</UL>

<P><STRONG><a name="[226]"></a>sys_sem_wait</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys_plat.o(i.sys_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sys_sem_wait &rArr; os_sem_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_send
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_recv
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_gethostbyname_r
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_enter
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_client
</UL>

<P><STRONG><a name="[2f7]"></a>sys_sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_sleep &rArr; os_task_sleep &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_server_thread
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
</UL>

<P><STRONG><a name="[2bf]"></a>sys_thread_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_plat.o(i.sys_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sys_thread_create &rArr; os_task_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_server_thread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server_thread
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server_start
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftpd_start
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_start
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
</UL>

<P><STRONG><a name="[25f]"></a>sys_thread_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_thread_exit &rArr; os_task_exit &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
</UL>

<P><STRONG><a name="[2b9]"></a>sys_thread_self</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_plat.o(i.sys_thread_self))
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
</UL>

<P><STRONG><a name="[3aa]"></a>sys_time_curr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_plat.o(i.sys_time_curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_time_curr &rArr; os_tick_count
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_count
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_begin_rto
</UL>

<P><STRONG><a name="[3ab]"></a>sys_time_goes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sys_plat.o(i.sys_time_goes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_time_goes &rArr; os_tick_count
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_count
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cal_rto
</UL>

<P><STRONG><a name="[383]"></a>task_insert_os</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_core.o(i.task_insert_os))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_start
</UL>

<P><STRONG><a name="[3ac]"></a>tcp_ack_process</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_ack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tcp_ack_process &rArr; tcp_retransmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_remove
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cal_snd_win
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cal_rto
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait_in
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_last_ack_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_2_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_wait_in
</UL>

<P><STRONG><a name="[401]"></a>tcp_buf_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_buf.o(i.tcp_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_connect (via Veneer)
</UL>

<P><STRONG><a name="[403]"></a>tcp_buf_read_rcv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tcp_buf.o(i.tcp_buf_read_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_buf_read_rcv
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv (via Veneer)
</UL>

<P><STRONG><a name="[269]"></a>tcp_buf_read_send</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tcp_buf.o(i.tcp_buf_read_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_buf_read_send &rArr; pktbuf_write &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_send_data
</UL>

<P><STRONG><a name="[3b1]"></a>tcp_buf_remove</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp_buf.o(i.tcp_buf_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_buf_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
</UL>

<P><STRONG><a name="[266]"></a>tcp_buf_write_rcv</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tcp_buf.o(i.tcp_buf_write_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_buf_write_rcv &rArr; pktbuf_read &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_data_to_rcvbuf
</UL>

<P><STRONG><a name="[3d8]"></a>tcp_buf_write_send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp_buf.o(i.tcp_buf_write_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_buf_write_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_sndbuf
</UL>

<P><STRONG><a name="[3b2]"></a>tcp_cal_rto</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_cal_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tcp_cal_rto &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_goes
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
</UL>

<P><STRONG><a name="[3af]"></a>tcp_cal_snd_win</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, tcp_out.o(i.tcp_cal_snd_win))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_cal_snd_win
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
</UL>

<P><STRONG><a name="[ae]"></a>tcp_close_wait_in</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, tcp_state.o(i.tcp_close_wait_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcp_close_wait_in &rArr; tcp_ack_process &rArr; tcp_retransmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>tcp_closed_in</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tcp_state.o(i.tcp_closed_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tcp_closed_in &rArr; tcp_send_reset &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>tcp_closing_in</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, tcp_state.o(i.tcp_closing_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_closing_in &rArr; tcp_data_in &rArr; copy_data_to_rcvbuf &rArr; tcp_send_ack &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_snd_done
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[3b7]"></a>tcp_data_in</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tcp_data_in &rArr; copy_data_to_rcvbuf &rArr; tcp_send_ack &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_data_to_rcvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_2_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in
</UL>

<P><STRONG><a name="[353]"></a>tcp_echo_server_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp_echo_server.o(i.tcp_echo_server_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_echo_server_start &rArr; sys_thread_create &rArr; os_task_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[a9]"></a>tcp_established_in</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, tcp_state.o(i.tcp_established_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_established_in &rArr; tcp_data_in &rArr; copy_data_to_rcvbuf &rArr; tcp_send_ack &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>tcp_fin_wait_1_in</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, tcp_state.o(i.tcp_fin_wait_1_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_fin_wait_1_in &rArr; tcp_data_in &rArr; copy_data_to_rcvbuf &rArr; tcp_send_ack &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_snd_done
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>tcp_fin_wait_2_in</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, tcp_state.o(i.tcp_fin_wait_2_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_fin_wait_2_in &rArr; tcp_data_in &rArr; copy_data_to_rcvbuf &rArr; tcp_send_ack &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[313]"></a>tcp_in</STRONG> (Thumb, 506 bytes, Stack size 80 bytes, tcp_in.o(i.tcp_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tcp_in &rArr; tcp_closed_in &rArr; tcp_send_reset &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read_options
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_restart (via Veneer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_find (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closed_in
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_peso
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seq_acceptable
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u32
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
</UL>

<P><STRONG><a name="[af]"></a>tcp_last_ack_in</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, tcp_state.o(i.tcp_last_ack_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcp_last_ack_in &rArr; tcp_ack_process &rArr; tcp_retransmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_snd_done
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>tcp_listen_in</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, tcp_state.o(i.tcp_listen_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tcp_listen_in &rArr; tcp_send_reset &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_child (via Veneer)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_count (via Veneer)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[3cb]"></a>tcp_ostate_name</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_ostate_name))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_timer_tmo
</UL>

<P><STRONG><a name="[3b6]"></a>tcp_out_event</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_out_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tcp_out_event &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_2_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_wait_in
</UL>

<P><STRONG><a name="[3c4]"></a>tcp_read_options</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tcp_state.o(i.tcp_read_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_read_options
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_child (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
</UL>

<P><STRONG><a name="[3ad]"></a>tcp_retransmit</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, tcp_out.o(i.tcp_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tcp_retransmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window (via Veneer)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_name
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sync_option
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_hdr_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_send_info
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_timer_tmo
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_rexmit_in
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_persist_in
</UL>

<P><STRONG><a name="[3c1]"></a>tcp_seg_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_seg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_seg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_hdr_size
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
</UL>

<P><STRONG><a name="[265]"></a>tcp_send_ack</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcp_send_ack &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_hdr_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait_in
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_data_to_rcvbuf
</UL>

<P><STRONG><a name="[3d0]"></a>tcp_send_fin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_out_event &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close (via Veneer)
</UL>

<P><STRONG><a name="[3d1]"></a>tcp_send_keepalive</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcp_send_keepalive &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_hdr_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_tmo (via Veneer)
</UL>

<P><STRONG><a name="[3b0]"></a>tcp_send_reset</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcp_send_reset &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_hdr_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait_in
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_in
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_last_ack_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_2_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closed_in
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_wait_in
</UL>

<P><STRONG><a name="[3d2]"></a>tcp_send_reset_for_tcp</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_reset_for_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcp_send_reset_for_tcp &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_hdr_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_tmo (via Veneer)
</UL>

<P><STRONG><a name="[3c8]"></a>tcp_send_syn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_send_syn))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcp_send_syn &rArr; tcp_out_event &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_in
</UL>

<P><STRONG><a name="[3d3]"></a>tcp_send_win_update</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_win_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tcp_send_win_update &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_hdr_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv (via Veneer)
</UL>

<P><STRONG><a name="[3ae]"></a>tcp_set_ostate</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_set_ostate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_set_ostate &rArr; net_timer_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_remove
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_sending_in
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_rexmit_in
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_persist_in
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_idle_in
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
</UL>

<P><STRONG><a name="[3bd]"></a>tcp_set_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_state.o(i.tcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in
</UL>

<P><STRONG><a name="[3b4]"></a>tcp_state_name</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_state.o(i.tcp_state_name))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait_in
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_in
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_last_ack_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_2_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closed_in
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_wait_in
</UL>

<P><STRONG><a name="[a8]"></a>tcp_syn_recvd_in</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, tcp_state.o(i.tcp_syn_recvd_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tcp_syn_recvd_in &rArr; tcp_ack_process &rArr; tcp_retransmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_start (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>tcp_syn_sent_in</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tcp_state.o(i.tcp_syn_sent_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcp_syn_sent_in &rArr; tcp_ack_process &rArr; tcp_retransmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read_options
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_start (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[3b9]"></a>tcp_time_wait</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcp_state.o(i.tcp_time_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcp_time_wait &rArr; net_timer_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_all_timers (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_2_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in
</UL>

<P><STRONG><a name="[ad]"></a>tcp_time_wait_in</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tcp_state.o(i.tcp_time_wait_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcp_time_wait_in &rArr; tcp_ack_process &rArr; tcp_retransmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ack_process
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>tcp_timewait_tmo</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp_state.o(i.tcp_timewait_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_tmo &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_state.o(i.tcp_time_wait)
</UL>
<P><STRONG><a name="[3ca]"></a>tcp_transmit</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tcp_transmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window (via Veneer)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_name
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sync_option
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_hdr_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_send_info
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit_most
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_sending_in
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_rexmit_in
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_idle_in
</UL>

<P><STRONG><a name="[3d7]"></a>tcp_write_sndbuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_write_sndbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_write_sndbuf &rArr; tcp_buf_write_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_write_send
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send (via Veneer)
</UL>

<P><STRONG><a name="[3dd]"></a>tftp_error_msg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tftp.o(i.tftp_error_msg))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
</UL>

<P><STRONG><a name="[356]"></a>tftp_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tftp_client.o(i.tftp_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tftp_get &rArr; do_tftp_get &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[3d9]"></a>tftp_parse_oack</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tftp.o(i.tftp_parse_oack))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tftp_parse_oack &rArr; tftp_send_error &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
</UL>

<P><STRONG><a name="[357]"></a>tftp_put</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tftp_client.o(i.tftp_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tftp_put &rArr; do_tftp_put &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[3da]"></a>tftp_resend</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tftp.o(i.tftp_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tftp_resend &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_packet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
</UL>

<P><STRONG><a name="[2a7]"></a>tftp_send_ack</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tftp.o(i.tftp_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tftp_send_ack &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_packet
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[2a9]"></a>tftp_send_data</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tftp.o(i.tftp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tftp_send_data &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_packet
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
</UL>

<P><STRONG><a name="[2a5]"></a>tftp_send_error</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tftp.o(i.tftp_send_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tftp_send_error &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_packet
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_error_msg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_parse_oack
</UL>

<P><STRONG><a name="[2a4]"></a>tftp_send_oack</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tftp.o(i.tftp_send_oack))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tftp_send_oack &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_packet
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_option
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
</UL>

<P><STRONG><a name="[3db]"></a>tftp_send_packet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tftp.o(i.tftp_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_sendto
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_request
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_oack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_resend
</UL>

<P><STRONG><a name="[2ac]"></a>tftp_send_request</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tftp.o(i.tftp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tftp_send_request &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_packet
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_option
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[358]"></a>tftp_start</STRONG> (Thumb, 306 bytes, Stack size 168 bytes, tftp_client.o(i.tftp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = tftp_start &rArr; do_tftp_put &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cmd_list
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[2a6]"></a>tftp_wait_packet</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, tftp.o(i.tftp_wait_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tftp_wait_packet &rArr; tftp_parse_oack &rArr; tftp_send_error &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recvfrom
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_resend
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_parse_oack
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[352]"></a>tftpd_start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tftp_server.o(i.tftpd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tftpd_start &rArr; sys_thread_create &rArr; os_task_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[332]"></a>tools_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tools.o(i.tools_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tools_init &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_little_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[218]"></a>uart_init</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = uart_init &rArr; os_queue_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[b3]"></a>udp_bind</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = udp_bind &rArr; sock_bind &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>udp_close</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, udp.o(i.udp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = udp_close &rArr; pktbuf_free &rArr; pktblock_free_list &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>udp_connect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_connect &rArr; sock_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>udp_create</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, udp.o(i.udp_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = udp_create &rArr; sock_wait_init &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_uninit
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock.o(.constdata)
</UL>
<P><STRONG><a name="[354]"></a>udp_echo_server_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, udp_echo_server.o(i.udp_echo_server_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = udp_echo_server_start &rArr; sys_thread_create &rArr; os_task_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
</UL>

<P><STRONG><a name="[312]"></a>udp_in</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, udp.o(i.udp_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = udp_in &rArr; dns_in &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_is_arrive
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_find
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_peso
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
</UL>

<P><STRONG><a name="[338]"></a>udp_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, udp.o(i.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = udp_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[3e7]"></a>udp_out</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, udp.o(i.udp_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_add_header
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_find
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_peso
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[b2]"></a>udp_recvfrom</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, udp.o(i.udp_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = udp_recvfrom &rArr; pktbuf_read &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>udp_sendto</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_write
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_port
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>usart_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(i.usart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usart_read &rArr; os_queue_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[21d]"></a>usart_write</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(i.usart_write))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[2f6]"></a>x_accept</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, socket.o(i.x_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = x_accept &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_server_thread
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[2fa]"></a>x_bind</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, socket.o(i.x_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = x_bind &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server_thread
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[25d]"></a>x_close</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, socket.o(i.x_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = x_close &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server_thread
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_close
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[2ae]"></a>x_connect</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, socket.o(i.x_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = x_connect &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[385]"></a>x_gethostbyname_r</STRONG> (Thumb, 416 bytes, Stack size 72 bytes, socket.o(i.x_gethostbyname_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = x_gethostbyname_r &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_set_any
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_free_req
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_req
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
</UL>

<P><STRONG><a name="[39c]"></a>x_inet_addr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, netapi.o(i.x_inet_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x_inet_addr &rArr; ipaddr_from_str
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_str
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
</UL>

<P><STRONG><a name="[38a]"></a>x_inet_ntoa</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netapi.o(i.x_inet_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = x_inet_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[386]"></a>x_inet_ntop</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, netapi.o(i.x_inet_ntop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = x_inet_ntop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_client_info
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
</UL>

<P><STRONG><a name="[2fb]"></a>x_listen</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, socket.o(i.x_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = x_listen &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[3bc]"></a>x_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, socket.o(i.x_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = x_read &rArr; x_recv &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[39a]"></a>x_recv</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, socket.o(i.x_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = x_recv &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_read
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_parese
</UL>

<P><STRONG><a name="[389]"></a>x_recvfrom</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, socket.o(i.x_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = x_recvfrom &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server
</UL>

<P><STRONG><a name="[2f2]"></a>x_send</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, socket.o(i.x_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_write
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_501_not_implemented
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_404_not_found
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_403_forbidden
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_400_bad_request
</UL>

<P><STRONG><a name="[388]"></a>x_sendto</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, socket.o(i.x_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_packet
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server
</UL>

<P><STRONG><a name="[257]"></a>x_setsockopt</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, socket.o(i.x_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = x_setsockopt &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
</UL>

<P><STRONG><a name="[2f9]"></a>x_socket</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, socket.o(i.x_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = x_socket &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmsg_func_exec
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server_thread
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_open
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_echo_server
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[3bb]"></a>x_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, socket.o(i.x_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = x_write &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_echo_server_thread
</UL>

<P><STRONG><a name="[70]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3e9]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
</UL>

<P><STRONG><a name="[3ec]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[3ef]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3ee]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[3f0]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[447]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[448]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[3f1]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[3f5]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[3f2]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3eb]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[3f3]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3f4]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[3ea]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[d1]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[d5]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[3ed]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[20b]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[16e]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[175]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[174]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3f6]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[3b5]"></a>tcp_abort</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state (via Veneer)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_all_timers
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_tmo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_timer_tmo (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_last_ack_in (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_2_in (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established_in (via Veneer)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in (via Veneer)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_wait_in (via Veneer)
</UL>

<P><STRONG><a name="[c1]"></a>tcp_accept</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_accept
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_buf (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL>
<P><STRONG><a name="[3fe]"></a>tcp_alloc_port</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, tcp.o(i.tcp_alloc_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_alloc_port
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[3c6]"></a>tcp_backlog_count</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tcp.o(i.tcp_backlog_count))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_in (via Veneer)
</UL>

<P><STRONG><a name="[bc]"></a>tcp_bind</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tcp_bind &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any (via Veneer)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy (via Veneer)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_find (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL>
<P><STRONG><a name="[3fb]"></a>tcp_clear_parent</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcp.o(i.tcp_clear_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_clear_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[ba]"></a>tcp_close</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_abort &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name (via Veneer)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state (via Veneer)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin (via Veneer)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_clear_parent
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_delayed_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL>
<P><STRONG><a name="[3fd]"></a>tcp_conn_exist</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tcp.o(i.tcp_conn_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_conn_exist
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[bd]"></a>tcp_connect</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcp_connect &rArr; tcp_send_syn &rArr; tcp_out_event &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any (via Veneer)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_find (via Veneer)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_state (via Veneer)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_conn_exist
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc_port
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>tcp_create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(i.tcp_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tcp_create &rArr; tcp_alloc &rArr; tcp_get_free &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_insert
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock.o(.constdata)
</UL>
<P><STRONG><a name="[3c7]"></a>tcp_create_child</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tcp.o(i.tcp_create_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tcp_create_child &rArr; tcp_alloc &rArr; tcp_get_free &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read_options (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_insert
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_connect
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_in (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>tcp_destory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp.o(i.tcp_destory))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcp_destory &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL>
<P><STRONG><a name="[3c2]"></a>tcp_find</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tcp.o(i.tcp_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_find
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any (via Veneer)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in (via Veneer)
</UL>

<P><STRONG><a name="[3d6]"></a>tcp_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tcp.o(i.tcp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove (via Veneer)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_all_timers
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_destroy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_destory
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_free
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_tmo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_tmo (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait_in (via Veneer)
</UL>

<P><STRONG><a name="[339]"></a>tcp_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp.o(i.tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init (via Veneer)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init (via Veneer)
</UL>

<P><STRONG><a name="[400]"></a>tcp_insert</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tcp_insert &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_child
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>

<P><STRONG><a name="[3c5]"></a>tcp_keepalive_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(i.tcp_keepalive_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive_restart &rArr; keepalive_start_timer &rArr; net_timer_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_remove (via Veneer)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setopt
</UL>

<P><STRONG><a name="[3d4]"></a>tcp_keepalive_start</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tcp.o(i.tcp_keepalive_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive_start &rArr; keepalive_start_timer &rArr; net_timer_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_remove (via Veneer)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setopt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_sent_in (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_syn_recvd_in (via Veneer)
</UL>

<P><STRONG><a name="[3d5]"></a>tcp_kill_all_timers</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_kill_all_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_remove (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_time_wait (via Veneer)
</UL>

<P><STRONG><a name="[c0]"></a>tcp_listen</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tcp_listen &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL>
<P><STRONG><a name="[3ba]"></a>tcp_rcv_window</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tcp.o(i.tcp_rcv_window))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_win_update (via Veneer)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset_for_tcp (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit (via Veneer)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack (via Veneer)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in (via Veneer)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seq_acceptable (via Veneer)
</UL>

<P><STRONG><a name="[bf]"></a>tcp_recv</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tcp_recv &rArr; tcp_send_win_update &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_win_update (via Veneer)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_read_rcv (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>tcp_send</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tcp.o(i.tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tcp_send &rArr; tcp_out_event &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_sndbuf (via Veneer)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_state_name (via Veneer)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_out_event (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>tcp_setopt</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, tcp.o(i.tcp_setopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tcp_setopt &rArr; tcp_keepalive_start &rArr; keepalive_start_timer &rArr; net_timer_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_start
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_restart
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_setopt (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.constdata)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[205]"></a>SetSysClock</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a2]"></a>ETHERNET_NVICConfiguration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lan8720.o(i.ETHERNET_NVICConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETHERNET_NVICConfiguration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[1b7]"></a>ETH_Delay</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4x7_eth.o(i.ETH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[2ef]"></a>get_next_task</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.get_next_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_next_task &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_first
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_run
</UL>

<P><STRONG><a name="[7e]"></a>idle_task_entry</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, os_core.o(i.idle_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = idle_task_entry &rArr; os_mem_free &rArr; free &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_free
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove_head
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_leave_protect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.os_init)
</UL>
<P><STRONG><a name="[35b]"></a>os_event_add_wait</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_event.o(i.os_event_add_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_event_add_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wait
</UL>

<P><STRONG><a name="[35f]"></a>os_event_remove_first</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_event.o(i.os_event_remove_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_event_remove_first
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup
</UL>

<P><STRONG><a name="[360]"></a>os_event_remove_wait</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_event.o(i.os_event_remove_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_event_remove_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_wakeup_task
</UL>

<P><STRONG><a name="[378]"></a>queue_copy</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_queue.o(i.queue_copy))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_release
</UL>

<P><STRONG><a name="[377]"></a>queue_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, os_queue.o(i.queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = queue_init &rArr; os_event_uninit &rArr; os_event_clear &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_uninit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_create
</UL>

<P><STRONG><a name="[37b]"></a>queue_read_out</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_queue.o(i.queue_read_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_read_out
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_wait
</UL>

<P><STRONG><a name="[379]"></a>queue_write_in</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, os_queue.o(i.queue_write_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_write_in
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_wait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_queue_release
</UL>

<P><STRONG><a name="[37d]"></a>sem_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_sem.o(i.sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sem_init &rArr; os_event_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_create
</UL>

<P><STRONG><a name="[77]"></a>arp_cache_tmo</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, arp.o(i.arp_cache_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = arp_cache_tmo &rArr; arp_make_request &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arp.o(i.arp_init)
</UL>
<P><STRONG><a name="[247]"></a>cache_alloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, arp.o(i.cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = cache_alloc &rArr; cache_clear_all &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clear_all
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
</UL>

<P><STRONG><a name="[22f]"></a>cache_clear_all</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, arp.o(i.cache_clear_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = cache_clear_all &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_clear
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_free
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_alloc
</UL>

<P><STRONG><a name="[248]"></a>cache_entry_set</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, arp.o(i.cache_entry_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cache_entry_set
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
</UL>

<P><STRONG><a name="[236]"></a>cache_find</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arp.o(i.cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cache_find &rArr; nlist_insert_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_find
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
</UL>

<P><STRONG><a name="[22d]"></a>cache_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, arp.o(i.cache_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = cache_free &rArr; cache_clear_all &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clear_all
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_tmo
</UL>

<P><STRONG><a name="[240]"></a>cache_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, arp.o(i.cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = cache_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_init
</UL>

<P><STRONG><a name="[23c]"></a>cache_insert</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, arp.o(i.cache_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = cache_insert &rArr; cache_send_all &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_send_all
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_find
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_entry_set
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_update_from_ipbuf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
</UL>

<P><STRONG><a name="[251]"></a>cache_send_all</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, arp.o(i.cache_send_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = cache_send_all &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_insert
</UL>

<P><STRONG><a name="[23a]"></a>is_pkt_ok</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, arp.o(i.is_pkt_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = is_pkt_ok &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
</UL>

<P><STRONG><a name="[24e]"></a>nlist_remove_first</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arp.o(i.nlist_remove_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nlist_remove_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_send_all
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clear_all
</UL>

<P><STRONG><a name="[239]"></a>pktbuf_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arp.o(i.pktbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_update_from_ipbuf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_reply
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
</UL>

<P><STRONG><a name="[23d]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arp.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_update_from_ipbuf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_request
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_reply
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_in
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
</UL>

<P><STRONG><a name="[220]"></a>add_query_field</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, dns.o(i.add_query_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = add_query_field &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_query
</UL>

<P><STRONG><a name="[288]"></a>dns_entry_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dns.o(i.dns_entry_free))
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_set_any
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_update_tmo
</UL>

<P><STRONG><a name="[28a]"></a>dns_entry_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dns.o(i.dns_entry_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dns_entry_init &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_insert
</UL>

<P><STRONG><a name="[28c]"></a>dns_entry_insert</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, dns.o(i.dns_entry_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dns_entry_insert &rArr; dns_entry_init &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
</UL>

<P><STRONG><a name="[298]"></a>dns_req_add</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dns.o(i.dns_req_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dns_req_add &rArr; nlist_insert_last
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_set_any
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
</UL>

<P><STRONG><a name="[293]"></a>dns_req_fail</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dns.o(i.dns_req_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_server_next
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_query
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_update_tmo
</UL>

<P><STRONG><a name="[292]"></a>dns_req_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dns.o(i.dns_req_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dns_req_remove &rArr; sys_sem_notify &rArr; os_sem_release &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_notify
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_set_any
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_fail
</UL>

<P><STRONG><a name="[29a]"></a>dns_send_query</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, dns.o(i.dns_send_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_query_field
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_in
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_update_tmo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_fail
</UL>

<P><STRONG><a name="[78]"></a>dns_update_tmo</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dns.o(i.dns_update_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = dns_update_tmo &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_query
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_req_fail
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_entry_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_init)
</UL>
<P><STRONG><a name="[290]"></a>domain_name_cmp</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, dns.o(i.domain_name_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = domain_name_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
</UL>

<P><STRONG><a name="[291]"></a>domain_name_skip</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dns.o(i.domain_name_skip))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
</UL>

<P><STRONG><a name="[224]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dns.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_in
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_query
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_query_field
</UL>

<P><STRONG><a name="[94]"></a>ether_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ether.o(i.ether_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ether_close &rArr; arp_clear &rArr; cache_clear_all &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ether.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ether_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ether.o(i.ether_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ether_open &rArr; arp_make_gratuitous &rArr; arp_make_request &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_make_gratuitous
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ether.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>ether_out</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ether.o(i.ether_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ether_out &rArr; arp_resolve &rArr; arp_make_request &rArr; ether_raw_out &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_resolve
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ether.o(.constdata)
</UL>
<P><STRONG><a name="[2b1]"></a>is_pkt_ok</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ether.o(i.is_pkt_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = is_pkt_ok &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_in
</UL>

<P><STRONG><a name="[2b0]"></a>pktbuf_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ether.o(i.pktbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_in
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_raw_out
</UL>

<P><STRONG><a name="[29f]"></a>do_func</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, exmsg.o(i.do_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = do_func &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_notify
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
</UL>

<P><STRONG><a name="[2a0]"></a>do_netif_in</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, exmsg.o(i.do_netif_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = do_netif_in &rArr; ipv4_in &rArr; ip_frag_in &rArr; ip_normal_in &rArr; udp_in &rArr; dns_in &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_in
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_thread
</UL>

<P><STRONG><a name="[79]"></a>work_thread</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, exmsg.o(i.work_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = work_thread &rArr; do_netif_in &rArr; ipv4_in &rArr; ip_frag_in &rArr; ip_normal_in &rArr; udp_in &rArr; dns_in &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_goes
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_curr
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_first_tmo
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_check_tmo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixq_recv
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netif_in
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_func
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exmsg.o(i.exmsg_start)
</UL>
<P><STRONG><a name="[2fe]"></a>icmpv4_echo_reply</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, icmpv4.o(i.icmpv4_echo_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = icmpv4_echo_reply &rArr; icmpv4_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
</UL>

<P><STRONG><a name="[300]"></a>icmpv4_out</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, icmpv4.o(i.icmpv4_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = icmpv4_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_echo_reply
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
</UL>

<P><STRONG><a name="[302]"></a>is_pkt_ok</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, icmpv4.o(i.is_pkt_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = is_pkt_ok &rArr; pktbuf_checksum16 &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
</UL>

<P><STRONG><a name="[2ff]"></a>pktbuf_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, icmpv4.o(i.pktbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_echo_reply
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
</UL>

<P><STRONG><a name="[2e2]"></a>frag_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ipv4.o(i.frag_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frag_add &rArr; nlist_insert_first
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_copy
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
</UL>

<P><STRONG><a name="[2e3]"></a>frag_alloc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ipv4.o(i.frag_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = frag_alloc &rArr; frag_free_buf_list &rArr; pktbuf_free &rArr; pktblock_free_list &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free_buf_list
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
</UL>

<P><STRONG><a name="[2e5]"></a>frag_find</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ipv4.o(i.frag_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = frag_find &rArr; nlist_insert_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
</UL>

<P><STRONG><a name="[2e6]"></a>frag_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ipv4.o(i.frag_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = frag_free &rArr; frag_free_buf_list &rArr; pktbuf_free &rArr; pktblock_free_list &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free_buf_list
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_tmo
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_join
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_insert
</UL>

<P><STRONG><a name="[2e4]"></a>frag_free_buf_list</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ipv4.o(i.frag_free_buf_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = frag_free_buf_list &rArr; pktbuf_free &rArr; pktblock_free_list &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_alloc
</UL>

<P><STRONG><a name="[2e8]"></a>frag_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ipv4.o(i.frag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = frag_init &rArr; mblock_init &rArr; nlocker_init &rArr; sys_mutex_create &rArr; os_mutex_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_init
</UL>

<P><STRONG><a name="[2e9]"></a>frag_insert</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ipv4.o(i.frag_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = frag_insert &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_after
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
</UL>

<P><STRONG><a name="[2ec]"></a>frag_is_all_arrived</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ipv4.o(i.frag_is_all_arrived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = frag_is_all_arrived
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
</UL>

<P><STRONG><a name="[2ed]"></a>frag_join</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ipv4.o(i.frag_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = frag_join &rArr; pktbuf_remove_header &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_join
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
</UL>

<P><STRONG><a name="[7a]"></a>frag_tmo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipv4.o(i.frag_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = frag_tmo &rArr; frag_free &rArr; frag_free_buf_list &rArr; pktbuf_free &rArr; pktblock_free_list &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipv4.o(i.frag_init)
</UL>
<P><STRONG><a name="[30c]"></a>ip_frag_in</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ipv4.o(i.ip_frag_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = ip_frag_in &rArr; ip_normal_in &rArr; udp_in &rArr; dns_in &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_join
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_is_all_arrived
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_insert
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_find
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_alloc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
</UL>

<P><STRONG><a name="[30e]"></a>ip_frag_out</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, ipv4.o(i.ip_frag_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_to_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_out
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_header_size
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphdr_htons
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_copy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
</UL>

<P><STRONG><a name="[30d]"></a>ip_normal_in</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, ipv4.o(i.ip_normal_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ip_normal_in &rArr; udp_in &rArr; dns_in &rArr; dns_req_fail &rArr; dns_send_query &rArr; udp_sendto &rArr; udp_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphdr_htons
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_out_unreach
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv4_in
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
</UL>

<P><STRONG><a name="[310]"></a>iphdr_htons</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ipv4.o(i.iphdr_htons))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iphdr_htons
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
</UL>

<P><STRONG><a name="[317]"></a>iphdr_ntohs</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ipv4.o(i.iphdr_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iphdr_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
</UL>

<P><STRONG><a name="[318]"></a>is_pkt_ok</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ipv4.o(i.is_pkt_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = is_pkt_ok &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum16
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
</UL>

<P><STRONG><a name="[2e7]"></a>nlist_remove_first</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ipv4.o(i.nlist_remove_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nlist_remove_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_join
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_free_buf_list
</UL>

<P><STRONG><a name="[2ea]"></a>pktbuf_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipv4.o(i.pktbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_in
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_normal_in
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_in
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_join
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_is_all_arrived
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_insert
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
</UL>

<P><STRONG><a name="[30f]"></a>set_header_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipv4.o(i.set_header_size))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_out
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
</UL>

<P><STRONG><a name="[316]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ipv4.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pkt_ok
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphdr_ntohs
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iphdr_htons
</UL>

<P><STRONG><a name="[98]"></a>loop_close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loop.o(i.loop_close))
<BR>[Address Reference Count : 1]<UL><LI> loop.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>loop_open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loop.o(i.loop_open))
<BR>[Address Reference Count : 1]<UL><LI> loop.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>loop_xmit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, loop.o(i.loop_xmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = loop_xmit &rArr; netif_put_in &rArr; exmsg_netif_in &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_put_in
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loop.o(.constdata)
</UL>
<P><STRONG><a name="[345]"></a>netif_get_layer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_get_layer))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_open
</UL>

<P><STRONG><a name="[34a]"></a>nlist_is_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nlist.o(i.nlist_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_after
</UL>

<P><STRONG><a name="[391]"></a>curr_blk_remain</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pktbuf.o(i.curr_blk_remain))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_fill
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_copy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
</UL>

<P><STRONG><a name="[32c]"></a>move_forward</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pktbuf.o(i.move_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = move_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_fill
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_copy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_checksum16
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
</UL>

<P><STRONG><a name="[34b]"></a>nlist_remove_first</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pktbuf.o(i.nlist_remove_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nlist_remove_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_join
</UL>

<P><STRONG><a name="[38b]"></a>pktblock_alloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pktbuf.o(i.pktblock_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pktblock_alloc &rArr; mblock_alloc &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc_list
</UL>

<P><STRONG><a name="[38c]"></a>pktblock_alloc_list</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, pktbuf.o(i.pktblock_alloc_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free_list
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_add_header
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
</UL>

<P><STRONG><a name="[38e]"></a>pktblock_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pktbuf.o(i.pktblock_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pktblock_free &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlocker_lock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
</UL>

<P><STRONG><a name="[38d]"></a>pktblock_free_list</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pktbuf.o(i.pktblock_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pktblock_free_list &rArr; mblock_free &rArr; nlocker_lock &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_alloc_list
</UL>

<P><STRONG><a name="[32d]"></a>pktbuf_blk_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pktbuf.o(i.pktbuf_blk_next))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_insert_blk_list
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktblock_free_list
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
</UL>

<P><STRONG><a name="[38f]"></a>pktbuf_first_blk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pktbuf.o(i.pktbuf_first_blk))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_remove_header
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_add_header
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_set_cont
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_join
</UL>

<P><STRONG><a name="[390]"></a>pktbuf_insert_blk_list</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pktbuf.o(i.pktbuf_insert_blk_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pktbuf_insert_blk_list &rArr; nlist_insert_after &rArr; nlist_insert_first
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_after
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_add_header
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_join
</UL>

<P><STRONG><a name="[34c]"></a>nlist_remove_first</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, raw.o(i.nlist_remove_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nlist_remove_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_close
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recvfrom
</UL>

<P><STRONG><a name="[398]"></a>pktbuf_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(i.pktbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recvfrom
</UL>

<P><STRONG><a name="[397]"></a>raw_find</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, raw.o(i.raw_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_find
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_in
</UL>

<P><STRONG><a name="[9c]"></a>raw_recvfrom</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, raw.o(i.raw_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = raw_recvfrom &rArr; pktbuf_read &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove_first
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>raw_sendto</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = raw_sendto &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_alloc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_from_buf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw.o(.constdata)
</UL>
<P><STRONG><a name="[3a3]"></a>get_socket</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sock.o(i.get_socket))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_setsockopt_req_in
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_sendto_req_in
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send_req_in
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_recvfrom_req_in
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_recv_req_in
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_listen_req_in
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_destroy_req_in
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_connect_req_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close_req_in
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bind_req_in
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_accept_req_in
</UL>

<P><STRONG><a name="[3a4]"></a>socket_alloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sock.o(i.socket_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = socket_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_create_req_in
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_accept_req_in
</UL>

<P><STRONG><a name="[3a6]"></a>socket_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sock.o(i.socket_free))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_destroy_req_in
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_create_req_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close_req_in
</UL>

<P><STRONG><a name="[3f8]"></a>keepalive_start_timer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcp.o(i.keepalive_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = keepalive_start_timer &rArr; net_timer_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_start
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive_restart
</UL>

<P><STRONG><a name="[3f9]"></a>tcp_alloc</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_get_free &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_free (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_free
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wait_init (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_child
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create
</UL>

<P><STRONG><a name="[b9]"></a>tcp_free_tmo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_free_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcp_free_tmo &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_set_delayed_free)
</UL>
<P><STRONG><a name="[3fa]"></a>tcp_get_free</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_get_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcp_get_free &rArr; tcp_free &rArr; tcp_kill_all_timers &rArr; net_timer_remove &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mblock_alloc (via Veneer)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[402]"></a>tcp_get_iss</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp.o(i.tcp_get_iss))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_connect
</UL>

<P><STRONG><a name="[3ff]"></a>tcp_init_connect</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tcp.o(i.tcp_init_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tcp_init_connect &rArr; rt_find &rArr; ipaddr_get_net
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_find (via Veneer)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_init (via Veneer)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_iss
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_child
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[b8]"></a>tcp_keepalive_tmo</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tcp.o(i.tcp_keepalive_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive_tmo &rArr; tcp_send_reset_for_tcp &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print (via Veneer)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset_for_tcp (via Veneer)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcp.o(i.tcp_keepalive_tmo)
<LI> tcp.o(i.keepalive_start_timer)
</UL>
<P><STRONG><a name="[3fc]"></a>tcp_set_delayed_free</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_set_delayed_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_set_delayed_free &rArr; net_timer_add &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add (via Veneer)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_remove (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[262]"></a>copy_data_to_rcvbuf</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, tcp_in.o(i.copy_data_to_rcvbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = copy_data_to_rcvbuf &rArr; tcp_send_ack &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_write_rcv
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_data_in
</UL>

<P><STRONG><a name="[3be]"></a>pktbuf_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp_in.o(i.pktbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_init
</UL>

<P><STRONG><a name="[3bf]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp_in.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
</UL>

<P><STRONG><a name="[3c0]"></a>swap_u32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp_in.o(i.swap_u32))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
</UL>

<P><STRONG><a name="[3cf]"></a>tcp_hdr_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_hdr_size))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_init
</UL>

<P><STRONG><a name="[3c3]"></a>tcp_seq_acceptable</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_seq_acceptable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_seq_acceptable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rcv_window (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_in
</UL>

<P><STRONG><a name="[267]"></a>copy_send_data</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tcp_out.o(i.copy_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = copy_send_data &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_seek
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_reset_acc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buf_read_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
</UL>

<P><STRONG><a name="[3cc]"></a>get_send_info</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, tcp_out.o(i.get_send_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_send_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
</UL>

<P><STRONG><a name="[268]"></a>pktbuf_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp_out.o(i.pktbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_win_update
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset_for_tcp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sync_option
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_send_data
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
</UL>

<P><STRONG><a name="[39f]"></a>send_out</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tcp_out.o(i.send_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4_out
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u32
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_peso
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_win_update
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset_for_tcp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
</UL>

<P><STRONG><a name="[3a0]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp_out.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sync_option
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
</UL>

<P><STRONG><a name="[3a1]"></a>swap_u32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp_out.o(i.swap_u32))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_out
</UL>

<P><STRONG><a name="[3b3]"></a>tcp_begin_rto</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_begin_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcp_begin_rto &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_curr
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_sending_in
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_idle_in
</UL>

<P><STRONG><a name="[a]"></a>tcp_ostate_idle_in</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_ostate_idle_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tcp_ostate_idle_in &rArr; tcp_transmit_most &rArr; tcp_transmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit_most
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_begin_rto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_out.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>tcp_ostate_persist_in</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_ostate_persist_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tcp_ostate_persist_in &rArr; tcp_transmit_most &rArr; tcp_transmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit_most
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_out.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>tcp_ostate_rexmit_in</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_ostate_rexmit_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tcp_ostate_rexmit_in &rArr; tcp_transmit_most &rArr; tcp_transmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit_most
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_out.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>tcp_ostate_sending_in</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_ostate_sending_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tcp_ostate_sending_in &rArr; tcp_transmit_most &rArr; tcp_transmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ostate
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit_most
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_begin_rto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_out.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>tcp_out_timer_tmo</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_out_timer_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tcp_out_timer_tmo &rArr; tcp_retransmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_wakeup
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_name
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcp_out.o(i.tcp_out_timer_tmo)
<LI> tcp_out.o(i.tcp_set_ostate)
</UL>
<P><STRONG><a name="[3ce]"></a>tcp_set_hdr_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_set_hdr_size))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_win_update
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset_for_tcp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
</UL>

<P><STRONG><a name="[3c9]"></a>tcp_transmit_most</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_transmit_most))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tcp_transmit_most &rArr; tcp_transmit &rArr; send_out &rArr; ipv4_out &rArr; ip_frag_out &rArr; pktbuf_alloc &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_sending_in
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_rexmit_in
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_persist_in
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ostate_idle_in
</UL>

<P><STRONG><a name="[3cd]"></a>write_sync_option</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tcp_out.o(i.write_sync_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = write_sync_option &rArr; pktbuf_resize &rArr; pktblock_alloc_list &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_resize
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pktbuf_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transmit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_retransmit
</UL>

<P><STRONG><a name="[3b8]"></a>tcp_snd_done</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp_state.o(i.tcp_snd_done))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_last_ack_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fin_wait_1_in
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_closing_in
</UL>

<P><STRONG><a name="[30b]"></a>insert_timer</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timer.o(i.insert_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = insert_timer &rArr; nlist_insert_after &rArr; nlist_insert_first
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_last
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_first
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_check_tmo
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_timer_add
</UL>

<P><STRONG><a name="[3e0]"></a>is_little_endian</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tools.o(i.is_little_endian))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_little_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tools_init
</UL>

<P><STRONG><a name="[229]"></a>alloc_port</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, udp.o(i.alloc_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alloc_port
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_port_used
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[31c]"></a>is_pkt_ok</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, udp.o(i.is_pkt_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = is_pkt_ok &rArr; dbg_print &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
</UL>

<P><STRONG><a name="[22a]"></a>is_port_used</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, udp.o(i.is_port_used))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_port
</UL>

<P><STRONG><a name="[34d]"></a>nlist_remove_first</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, udp.o(i.nlist_remove_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nlist_remove_first
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
</UL>

<P><STRONG><a name="[3e5]"></a>pktbuf_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.pktbuf_data))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
</UL>

<P><STRONG><a name="[3e3]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_out
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[3e4]"></a>udp_find</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, udp.o(i.udp_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_find
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_any
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_is_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_in
</UL>

<P><STRONG><a name="[7d]"></a>first_task_entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app.o(i.first_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = first_task_entry &rArr; os_app_loop &rArr; tftp_start &rArr; do_tftp_put &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_loop
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_app_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[3dc]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tftp.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_request
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_oack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack
</UL>

<P><STRONG><a name="[3de]"></a>write_option</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tftp.o(i.write_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = write_option &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_request
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_oack
</UL>

<P><STRONG><a name="[2ad]"></a>tftp_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftp_client.o(i.tftp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tftp_close &rArr; x_close &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[2ab]"></a>tftp_open</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, tftp_client.o(i.tftp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tftp_open &rArr; x_setsockopt &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_addr
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_setsockopt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_put
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftp_get
</UL>

<P><STRONG><a name="[2a3]"></a>do_recv_file</STRONG> (Thumb, 274 bytes, Stack size 176 bytes, tftp_server.o(i.do_recv_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = do_recv_file &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_oack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
</UL>

<P><STRONG><a name="[2a8]"></a>do_send_file</STRONG> (Thumb, 336 bytes, Stack size 176 bytes, tftp_server.o(i.do_send_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = do_send_file &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_oack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_working_thread
</UL>

<P><STRONG><a name="[84]"></a>tftp_server_thread</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tftp_server.o(i.tftp_server_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = tftp_server_thread &rArr; wait_for_req &rArr; tftp_wait_packet &rArr; tftp_parse_oack &rArr; tftp_send_error &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_bind
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_req
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftp_server.o(i.tftpd_start)
</UL>
<P><STRONG><a name="[83]"></a>tftp_working_thread</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tftp_server.o(i.tftp_working_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = tftp_working_thread &rArr; do_send_file &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntoa
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_setsockopt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_file
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv_file
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftp_server.o(i.tftp_server_thread)
</UL>
<P><STRONG><a name="[3df]"></a>wait_for_req</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, tftp_server.o(i.wait_for_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = wait_for_req &rArr; tftp_wait_packet &rArr; tftp_parse_oack &rArr; tftp_send_error &rArr; tftp_send_packet &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntoa
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_wait_packet
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_server_thread
</UL>

<P><STRONG><a name="[225]"></a>alloc_client</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, httpd.o(i.alloc_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = alloc_client &rArr; sys_sem_wait &rArr; os_sem_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_server_thread
</UL>

<P><STRONG><a name="[7b]"></a>client_thread</STRONG> (Thumb, 164 bytes, Stack size 1064 bytes, httpd.o(i.client_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = client_thread &rArr; request_parese &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_setsockopt
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_exit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_request
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_request
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_client_info
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_parese
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_request
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_client
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.httpd_server_thread)
</UL>
<P><STRONG><a name="[25e]"></a>free_client</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, httpd.o(i.free_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = free_client &rArr; sys_mutex_lock &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_notify
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_server_thread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
</UL>

<P><STRONG><a name="[2f1]"></a>http_400_bad_request</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, httpd.o(i.http_400_bad_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = http_400_bad_request &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_request
</UL>

<P><STRONG><a name="[2f3]"></a>http_403_forbidden</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, httpd.o(i.http_403_forbidden))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = http_403_forbidden &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_request
</UL>

<P><STRONG><a name="[2f4]"></a>http_404_not_found</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, httpd.o(i.http_404_not_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = http_404_not_found &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
</UL>

<P><STRONG><a name="[2f5]"></a>http_501_not_implemented</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, httpd.o(i.http_501_not_implemented))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = http_501_not_implemented &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_request
</UL>

<P><STRONG><a name="[7c]"></a>httpd_server_thread</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, httpd.o(i.httpd_server_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = httpd_server_thread &rArr; x_accept &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_create
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_accept
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sleep
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_client_info
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_client
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_client
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.httpd_start)
</UL>
<P><STRONG><a name="[325]"></a>method_get_in</STRONG> (Thumb, 246 bytes, Stack size 392 bytes, httpd.o(i.method_get_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = method_get_in &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_send
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_text
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_set_start
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_set_property
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mime_find
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_404_not_found
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_request
</UL>

<P><STRONG><a name="[329]"></a>mime_find</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, httpd.o(i.mime_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mime_find &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
</UL>

<P><STRONG><a name="[25c]"></a>process_request</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, httpd.o(i.process_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = process_request &rArr; method_get_in &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_501_not_implemented
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
</UL>

<P><STRONG><a name="[258]"></a>request_parese</STRONG> (Thumb, 106 bytes, Stack size 536 bytes, httpd.o(i.request_parese))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = request_parese &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recv
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
</UL>

<P><STRONG><a name="[326]"></a>response_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, httpd.o(i.response_init))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
</UL>

<P><STRONG><a name="[328]"></a>response_set_property</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, httpd.o(i.response_set_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = response_set_property &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
</UL>

<P><STRONG><a name="[327]"></a>response_set_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, httpd.o(i.response_set_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = response_set_start &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
</UL>

<P><STRONG><a name="[32a]"></a>response_text</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, httpd.o(i.response_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = response_text &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;method_get_in
</UL>

<P><STRONG><a name="[259]"></a>show_client_info</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, httpd.o(i.show_client_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = show_client_info &rArr; x_inet_ntop &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_server_thread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
</UL>

<P><STRONG><a name="[25a]"></a>show_request</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, httpd.o(i.show_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = show_request &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
</UL>

<P><STRONG><a name="[25b]"></a>valid_request</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, httpd.o(i.valid_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = valid_request &rArr; http_403_forbidden &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_403_forbidden
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_400_bad_request
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_thread
</UL>

<P><STRONG><a name="[387]"></a>checksum</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ping.o(i.checksum))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_run
</UL>

<P><STRONG><a name="[39d]"></a>swap_u32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ntp.o(i.swap_u32))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_time
</UL>

<P><STRONG><a name="[252]"></a>check_fs</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[26f]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2c3]"></a>clmt_clust</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[260]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[26a]"></a>create_chain</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[26d]"></a>create_name</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[274]"></a>dir_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[277]"></a>dir_find</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[276]"></a>dir_next</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[27c]"></a>dir_register</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2c8]"></a>find_volume</STRONG> (Thumb, 784 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[27f]"></a>fit_lfn</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2ca]"></a>follow_path</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[27e]"></a>gen_numname</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2c5]"></a>get_ldnumber</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2cc]"></a>ld_clust</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[2d7]"></a>lock_fs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; os_sem_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[279]"></a>mem_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[27d]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[270]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[253]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[2ce]"></a>remove_chain</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2cd]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[278]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2d0]"></a>sync_fs</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[27a]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2c2]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; os_sem_release &rArr; os_event_wakeup &rArr; os_sched_set_ready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2c1]"></a>validate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; os_sem_wait &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[80]"></a>tcp_echo_server_thread</STRONG> (Thumb, 202 bytes, Stack size 184 bytes, tcp_echo_server.o(i.tcp_echo_server_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tcp_echo_server_thread &rArr; x_write &rArr; x_send &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntoa
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_write
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_read
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_listen
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_bind
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_accept
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_echo_server.o(i.tcp_echo_server_start)
</UL>
<P><STRONG><a name="[85]"></a>udp_echo_server</STRONG> (Thumb, 198 bytes, Stack size 336 bytes, udp_echo_server.o(i.udp_echo_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = udp_echo_server &rArr; x_sendto &rArr; exmsg_func_exec &rArr; sys_sem_create &rArr; os_sem_create &rArr; os_mem_alloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; os_mutex_lock &rArr; os_event_wait &rArr; os_sched_set_unready &rArr; os_bitmap_check &rArr; os_list_first
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_inet_ntoa
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_socket
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_sendto
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_recvfrom
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_close
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_bind
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp_echo_server.o(i.udp_echo_server_start)
</UL>
<P><STRONG><a name="[107]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[137]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[71]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[170]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
