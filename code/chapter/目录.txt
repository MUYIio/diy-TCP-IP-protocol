# 第3章 基础知识
学习目标：了解基本的线程、线程同步等概念，初步学习使用socket接口编写网络应用；初步掌握网络数据包收发的方法。
* 第03.00: 基础知识与概念(无代码)
* 第03.01: 向网络上发送数据包
* 第03.02: 接受数据包修改并发回
* 第03.03: 了解什么是线程
* 第03.04: 利用计数信号量同步线程
* 第03.05: 利用互斥锁进行资源保护
* 第03.06: 线程间的资源访问控制实例(1) - 循环缓存
* 第03.07: 线程间的资源访问控制实例(2) - 降低读速率
* 第03.08: 线程间的资源访问控制实例(3) - 降低写速率
* 第03.09: 利用套接字设计客户机
* 第03.10: 利用套接字设计服务器

# 第4章 整体软件结构设计
学习目标：了解整体的软件设计结构与策略，建立若干相关的工作线程，学习vs第ode环境下基本的多线程调试方法
* 第04.00 整体软件结构规划
* 第04.01 协议栈系统初始化
* 第04.02 创建核心工作线程
* 第04.03 创建数据包收发线程
  
# 第5章 调试信息输出
学习目标：实现若干基本的调试输出接口与宏定义，方便后续开发过程中分析遇到的各种问题
* 第05.01 基本调试信息输出
* 第05.02 给调试输出增加颜色
* 第05.03 按不同等级输出信息
* 第05.04 增加assert断言

# 第6章 设计通用的链表结构
学习目标：设计一种通用的链表结构，可以容纳任何类型的数据结构，作为整个协议栈的核心基础。
* 第06.01 创建结点结构
* 第06.02 创建链表
* 第06.03 头部插入结点
* 第06.04 遍历链表(两个遍历访问的宏)
* 第06.05 删除头部结点
* 第06.06 尾部插入结点
* 第06.07 插入到指定结点之后

# 第7章 实现定长内存块管理
学习目标：利用链表和锁实现一种定长内存管理结构，为整个协议栈中重要数据结构提供基本的内存分配与回收处理办法。
* 第07.00 协议栈中的存储管理问题（无代码）
* 第07.01 创建内存块管理器结构
* 第07.02 实现上锁和解锁接口
* 第07.03 建立内存块链
* 第07.04 申请内存块
* 第07.05 释放内存块

# 第8章 定长消息队列的实现
学习目标：实现任务间通信的消息队列，为向工作线程发送消息提供基础组件。
* 第08.00 协议栈中的线程间的通信问题（无代码）
* 第08.01 创建定长消息队列结构
* 第08.02 初始化核心线程的消息通信
* 第08.03 向核心线程发送网卡消息
* 第08.04 接受网卡线程发来的消息
* 第08.05 销毁消息队列

# 第9章 网络数据包结构设计
学习目标：设计一种不定长的、链式的数据包结构，用于灵活存储不同的网络数据包，从而节省内存空间，提升利用率。
* 第09.00 数据包结构设计简介（无代码）
* 第09.01 添加数据包结构
* 第09.02 分配块链
* 第09.03 分配指定大小的数据包
* 第09.04 显示数据包信息
* 第09.05 释放数据包
* 第09.06 添加连续包头
* 第09.07 移除包头
* 第09.08 添加非连续包头
* 第09.09 调整包大小(1) - 包的扩大
* 第09.09 调整包大小(2) - 包的缩小
* 第09.10 合并两个包
* 第09.11 设置包的连续性
* 第09.12 增加包访问功能
* 第09.13 写数据包
* 第09.14 读数据包
* 第09.15 设置读写的起始位置
* 第09.16 数据包的拷贝
* 第09.17 填充数据包
* 第09.18 增加其它支持函数

# 第10章 网络接口层设计
学习目标：实现抽像的网络接口结构，用于描述不同类型的网络接口，同时增加相关的链表将这些接口组织起来。
* 第10.00 网络接口的设计简介（无代码）
* 第10.01 添加网络接口结构
* 第10.02 初始化网络接口层
* 第10.03 打开网络接口
* 第10.04 添加环回接口
* 第10.05 将地址串转换为IP地址
* 第10.06 设置网络接口的地址
* 第10.07 激活环回接口
* 第10.08 显示网络接口列表
* 第10.09 关闭和设置缺省的网络接口
* 第10.10 增加数据包队列的写入和读取
* 第10.11 添加数据包发送接口

# 第11章 支持以太网协议
学习目标：支持以太网接口、增加协议的支持、可通过该协议收发数据包，处理大小端。
* 第11.00 以太网协议简介及设计规划
* 第11.01 打开物理网络接口
* 第11.02 接收数据并发给工作线程
* 第11.03 将数据通过网络接口发出去
* 第11.04 添加链路层接口
* 第11.05 添加以太网接口
* 第11.06 添加以太网包结构定义
* 第11.07 网络大小端转换（1）- 原理介绍
* 第11.07 网络大小端转换（2）- 转换函数
* 第11.07 网络大小端转换 (3) - 面试题-如何实现大小端转换
* 第11.08 以太网输入包的处理
* 第11.09 显示以太网包结构
* 第11.10 输出以太网数据包

# 第12章 定时器的实现
学习目标：实现一种软定时器结构，仅仅利用非常少的资料便可以实现不同时长的定时，方便用于后续的各种协议定时需求。
* 第12.00 定时器设计简介
* 第12.01 添加定时器结构
* 第12.02 增加定时器测试代码
* 第12.03 插入定时器（简单方法）
* 第12.04 插入定时器（升序方法）
* 第12.05 删除定时器
* 第12.06 扫描定时器列表
* 第12.07 让工作线程处理定时事件

# 第13章 支持ARP协议
学习目标：支持ARP协议，能够进行IP地址到Ma第地址的转换，且内置ARP缓存表并进行动态更新。
* 第13.00 ARP协议简介
* 第13.01 向指定IP地址发送数据
* 第13.02 初始化ARP模块
* 第13.03 发送ARP请求
* 第13.04 生成无回报（免费）ARP
* 第13.05 获取ARP输入包（较长时间）
* 第13.06 响应发来的ARP请求
* 第13.07 显示ARP包结构和缓存表
* 第13.08 分配和释放缓存表项
* 第13.09 查找和插入表项
* 第13.10 解析IP地址并发送包
* 第13.11 给缓存表项增加超时重新请求
* 第13.12 清空ARP表和查找ARP表

# 第14章 初步支持IP协议
学习目标：初步支持IPv4协议，实现输入IP包的多路分解以及IP数据报的发送。
* 第14.00 IP协议简介
* 第14.01 添加IP数据报头
* 第14.02 接收输入的IP数据报
* 第14.03 IP数据报的预处理检查
* 第14.04 使用校验和检查包头正确性
* 第14.05 IP数据报分解处理
* 第14.06 显示IP包内容
* 第14.07 发送IP数据报
* 第14.08 增加IP包发送检验和计算

# 第15章 支持ICMP协议
学习目标：支持icmp协议，能够响应远程发来的ping响应
* 第15.00 ICMP协议简介
* 第15.01 ICMP模块初始化
* 第15.02 ICMP输入处理
* 第15.03 响应ping请求
* 第15.04 用IP包更新ARP表
* 第15.05 报告端口不可达

# 第16章 IP数据报的分片与重组
学习目标：实现对大的IP数据报进行分片和重组，从而允许应用程序传送大的数据包。
* 第16.00 IP分片与重组介绍
* 第16.01 分片与重组的初始化
* 第16.02 分片结构的分配与释放
* 第16.03 分片的查找与添加
* 第16.04 显示分片列表
* 第16.05 插入分片
* 第16.06 数据报分片的重组
* 第16.07 数据报分片发送
* 第16.08 分片超时处理
* 第16.09 校验和算法的调整

# 第17章 设计自己的ping命令
学习目标：通过设计自己的ping命令，熟悉使用socket接口的RAW模式编程。
* 第17.00 ping程序实现原理
* 第17.01 添加ping结构与接口
* 第17.02 实现ping的发送及响应
* 第17.03 实现ping的响应结果输出
* 第17.04 增加超时和命令行调用

# 第17章 RAW模式的Socket编程（暂不支持127和外网）
学习目标：实现自己的socket接口的基本接口，让ping不依赖于特定的操作系统。
* 第18.00 socket接口设计结构简介
* 第18.01 请求核心工作线程执行功能函数
* 第18.02 发送消息请求执行功能
* 第18.03 定义自己的地址转换函数
* 第18.04 实现自己的地址转换函数
* 第18.05 定义socket接口
* 第18.06 分配socket结构
* 第18.07 发消息给工作线程分配socket结构

* 第18.08 sock结构定义及初始化
* 第18.09 建立RAW结构
* 第18.10 创建raw结构块
* 第18.11 初始化数据发送接口
* 第18.12 将数据包发送出去

* 第18.13 初始化数据包接收
* 第18.14 添加sock等待接口
* 第18.15 实现各种等待接口(运行会异常，正常现像，wait没有设置)
* 第18.16 初始化sock等待结构
* 第18.17 让接收能够等待

* 第18.18 添加设置超时接口
* 第18.19 开启读取超时
* 第18.20 对IP数据报进行处理
* 第18.21 实现对ping的响应
* 第18.22 添加close接口
* 第18.23 实现raw接口的关闭

# 第19章 允许通过路由访问外网
学习目标：增加路由表，使得ping程序可以与外网进行通信。
* 第19.00 访问外部网络的原理
* 第19.01 设计基础的路由表结构
* 第19.02 添加路由表项
* 第19.03 删除路由
* 第19.04 设置缺省路由
* 第19.05 从路由表中找到合适的表项
* 第19.06 通过路由器将数据包发往外部

# 第20章 支持UDP协议(模块创建-发送-接收-关闭)
学习目标：认识并熟悉UDP协议，增加UDP协议的支持的socket接口。
* 第20.00 UDP协议简介
* 第20.01 创建UDP客户端
* 第20.02 创建UDP回显服务器
* 第20.03 UDP模块初始化(定义UDP结构和块的分配处理)
* 第20.04 创建UDP套接字
* 第20.05 UDP数据的发送处理
* 第20.06 动态分配端口
* 第20.07 实现UDP数据的发送（校验和为0也能被对方接收）
* 第20.08 计算伪校验和
* 第20.09 UDP数据包输入处理（1）
* 第20.10 UDP数据包输入处理（2）- 需要在sendto之前才能收到对方的包，不然提示no-udp for this packet
* 第20.11 UDP读取的实现
* 第20.12 关闭UDP套接字
* 第20.13 增加connect接口(1)
* 第20.14 增加connect接口(2) - 仍然需要sendto之后才能收包，因为没有绑定本地的端口
* 第20.15 增加send接口(1) - 基本接口实现
* 第20.16 增加send接口(2) - 数据包发送实现
* 第20.17 增加recv接口(1) - 基本接口实现
* 第20.18 增加recv接口(2) - 数据包接收实现
* 第20.19 增加bind接口(1) - 基本接口实现
* 第20.20 增加bind接口(2) - 实现端口和地址的绑定
* 第20.21 让原始套接字支持connect/recv/send/bind

# 第21章 TCP协议之建立基本的链接
学习目标：学习TCP协议及其传输原理，实现基本的TCP连接建立和断开
* 第21.00 TCP协议课程规划
* 第21.00 TCP连接管理简介
* 第21.01 TCP协议初始化
* 第21.02 创建TCP套接字
* 第21.03 接收输入的TCP包
* 第21.04 发送reset复位包
* 第21.05 几个TCP调试函数
* 第21.06 增加connect/close回调函数
* 第21.07 分配端口及检查连接的存在性
* 第21.08 添加connect等待结构
* 第21.09 收发窗口及序号初始化(下一节要发送SYN报文，准备一下)
* 第21.10 发送SYN报文 （TODO：随机数相关，补充到文档里）
* 第21.11 设置TCP状态
* 第21.12 寻找合适的TCP控制块
* 第21.13 添加输入状态处理函数
* 第21.14 响应SYN+ACK报文（1）-终止连接
* 第21.14 响应SYN+ACK报文（2）-更新序号值
* 第21.15 从SYN_SENT进入ESTABLISHED
* 第21.16 从ESTABLISHED进入CLOSE-WAIT（关闭接收）
* 第21.17 从CLOSE_WAIT进入LAST_ACK（关闭发送）
* 第21.18 从LAST_ACK进入CLOSED
* 第21.19 主动close进入FIN_WAIT_2
* 第21.20 从FIN_WAIT_2进入TIME_WAIT
* 第21.21 TIME_WAIT输入处理
* 第21.22 同时关闭，进入CLOSING（1）
* 第21.22 同时关闭，进入CLOSING（2）
* 第21.23 CLOSED状态处理及连接总结

# 第22章 TCP数据传输及滑动窗口算法
学习目标：允许进行TCP的数据收发，实现滑动窗口算法的来控制发送收发的流量
* 第22.00 TCP数据发送介绍
* 第22.01 初始化发送缓存
* 第22.02 添加TCP发送的支持
* 第22.03 将数据写入发送缓存
* 第22.04 将部分数据发送出去（较复杂）
* 第22.05 发送全部数据到对方
* 第22.06 读取TCP选项(MSS)(文档)
* 第22.07 TCP数据分段发送(mss只是建议值)
* 第22.08 TCP数据发送总结

* 第22.09 添加接收缓存及接收介绍
* 第22.10 添加下载测试代码（虚拟机中放在社区中）
* 第22.11 增加TCP读取函数
* 第22.12 往接收缓存中写数据
* 第22.13 将数据包中的数据写入缓存
* 第22.14 从接收缓存读取数据
* 第22.15 半关闭时接收返回EOF
* 第22.16 连接时写入选项MSS
* 第22.17 通知对方自己的接收窗口大小(对方的发送速度要慢一些，零窗口暂时不能处理)
* 第22.18 检查序号的正确性(数据包重复错误)
* 第22.19 FIN与数据处理的先后顺序

# 第23章 TCP零窗口检查的实现
学习目标：实现发送零窗口的接收，以及接收零窗口的回应。

# 第24章 TCP保活机制的实现
学习目标：实现TCP的保活机制，使得连接能够持续建立，并识别已经断开的连接。
注意ARP表项超时设置长一些，不然又会短时生发ARP请求，导致看不到keepalive包

# 第25章 TCP的被动打开实现
学习目标：实现TCP的被动打开，从而允许应用程序利用bind/listen/accept创建自己的接口。

* 第23.00 TCP丢包、重传、乱序及输出状态机
* 第23.01

# 第26章 TCP发送重传及动态RTO的计算
学习目标：实现TCP重传，以处理丢包、乱序等各种问题，同时动态计算RTO，以调整超时时间值。


# 第27章 DNS协议实现
# 第28章 DHCP协议

# 第29章 移植到ARM芯片(STM32)，支持嵌入式设备
学习目标：将协议栈移植到ARM芯片上，基于STM32处理器，了解协议栈如何移植到嵌入式设备上。

# 第31章 移植到x86操作系统，支持RTL8139网卡
